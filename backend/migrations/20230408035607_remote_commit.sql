create type "auth"."code_challenge_method" as enum ('s256', 'plain');

create table "auth"."flow_state" (
    "id" uuid not null,
    "user_id" uuid,
    "auth_code" text not null,
    "code_challenge_method" auth.code_challenge_method not null,
    "code_challenge" text not null,
    "provider_type" text not null,
    "provider_access_token" text,
    "provider_refresh_token" text,
    "created_at" timestamp with time zone,
    "updated_at" timestamp with time zone
);


CREATE UNIQUE INDEX flow_state_pkey ON auth.flow_state USING btree (id);

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);

alter table "auth"."flow_state" add constraint "flow_state_pkey" PRIMARY KEY using index "flow_state_pkey";


drop policy "anyone can select locations of public projects" on "public"."projects_location";

alter table "public"."organisations_actors" drop constraint "organisations_actors_role_fkey";

drop view if exists "public"."editable_actors";

drop view if exists "public"."projects_publication_status_fulfill";

alter table "public"."actor_organisation_role" drop constraint "actor_role_pkey";

alter table "public"."organisations_actors" drop constraint "organisations_actors_pkey";

drop index if exists "public"."actor_role_pkey";

drop index if exists "public"."organisations_actors_pkey";

drop table "public"."actor_organisation_role";

create table "public"."actor_duty" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" text not null,
    "description" text,
    "updated_at" timestamp with time zone not null default now(),
    "skill_title" text not null,
    "skill_label" text not null,
    "short_title" text
);


alter table "public"."actor_duty" enable row level security;

create table "public"."actors_publication_status_duplicate" (
    "updated_at" timestamp with time zone not null default now(),
    "updated_by" uuid not null default default_uid(),
    "published" timestamp with time zone,
    "requested" timestamp with time zone,
    "actor" uuid not null
);


alter table "public"."actors_publication_status_duplicate" enable row level security;

create table "public"."organisations_actors_duty" (
    "id" uuid not null,
    "created_at" timestamp with time zone default now(),
    "duty" bigint not null
);


alter table "public"."organisations_actors_duty" enable row level security;

create table "public"."organisations_publication_status" (
    "updated_at" timestamp with time zone not null default now(),
    "updated_by" uuid not null default default_uid(),
    "published" timestamp with time zone,
    "requested" timestamp with time zone,
    "organisation" uuid not null
);


alter table "public"."organisations_publication_status" enable row level security;

create table "public"."projects_actors" (
    "project" uuid not null,
    "created_at" timestamp with time zone default now(),
    "actor" uuid not null,
    "duty" bigint,
    "organisation" uuid
);


alter table "public"."projects_actors" enable row level security;

create table "public"."projects_organisations" (
    "project" uuid not null,
    "created_at" timestamp with time zone default now(),
    "organisation" uuid not null
);


alter table "public"."projects_organisations" enable row level security;

alter table "public"."actors" alter column "id" set default uuid_generate_v4();

alter table "public"."actors_users" drop column "role";

alter table "public"."actors_users" add column "updated_at" timestamp with time zone not null default now();

alter table "public"."organisations" add column "url" text;

alter table "public"."organisations_actors" drop column "role";

alter table "public"."organisations_actors" add column "end" date;

alter table "public"."organisations_actors" add column "id" uuid not null default uuid_generate_v4();

alter table "public"."organisations_actors" add column "start" date not null;

alter table "public"."projects_images_credits" alter column "first_name" drop not null;

alter table "public"."projects_location" drop column "circle";

alter table "public"."projects_location" add column "obfuscated" geometry(Point) generated always as (
CASE
    WHEN ((radius IS NULL) OR (center IS NULL)) THEN NULL::geometry(Point)
    ELSE st_geometryn(st_generatepoints(st_buffer(center, (radius)::double precision, 'quad_segs=8'::text), 1, 10101), 1)
END) stored;

CREATE UNIQUE INDEX actors_publication_status_duplicate_pkey ON public.actors_publication_status_duplicate USING btree (actor);

CREATE UNIQUE INDEX organisations_publication_status_pkey ON public.organisations_publication_status USING btree (organisation);

CREATE UNIQUE INDEX organisations_users_roles_pkey ON public.organisations_actors_duty USING btree (id, duty);

CREATE UNIQUE INDEX projects_actors_pkey ON public.projects_actors USING btree (project, actor);

CREATE UNIQUE INDEX projects_organisations_pkey ON public.projects_organisations USING btree (project, organisation);

CREATE UNIQUE INDEX actor_role_pkey ON public.actor_duty USING btree (id);

CREATE UNIQUE INDEX organisations_actors_pkey ON public.organisations_actors USING btree (id);

alter table "public"."actor_duty" add constraint "actor_role_pkey" PRIMARY KEY using index "actor_role_pkey";

alter table "public"."actors_publication_status_duplicate" add constraint "actors_publication_status_duplicate_pkey" PRIMARY KEY using index "actors_publication_status_duplicate_pkey";

alter table "public"."organisations_actors_duty" add constraint "organisations_users_roles_pkey" PRIMARY KEY using index "organisations_users_roles_pkey";

alter table "public"."organisations_publication_status" add constraint "organisations_publication_status_pkey" PRIMARY KEY using index "organisations_publication_status_pkey";

alter table "public"."projects_actors" add constraint "projects_actors_pkey" PRIMARY KEY using index "projects_actors_pkey";

alter table "public"."projects_organisations" add constraint "projects_organisations_pkey" PRIMARY KEY using index "projects_organisations_pkey";

alter table "public"."organisations_actors" add constraint "organisations_actors_pkey" PRIMARY KEY using index "organisations_actors_pkey";

alter table "public"."actors_publication_status_duplicate" add constraint "actors_publication_status_duplicate_actor_fkey" FOREIGN KEY (actor) REFERENCES actors(id) ON DELETE CASCADE not valid;

alter table "public"."actors_publication_status_duplicate" validate constraint "actors_publication_status_duplicate_actor_fkey";

alter table "public"."actors_publication_status_duplicate" add constraint "actors_publication_status_duplicate_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES users(id) not valid;

alter table "public"."actors_publication_status_duplicate" validate constraint "actors_publication_status_duplicate_updated_by_fkey";

alter table "public"."organisations_actors_duty" add constraint "organisations_actors_duty_duty_fkey" FOREIGN KEY (duty) REFERENCES actor_duty(id) ON DELETE CASCADE not valid;

alter table "public"."organisations_actors_duty" validate constraint "organisations_actors_duty_duty_fkey";

alter table "public"."organisations_actors_duty" add constraint "organisations_actors_duty_id_fkey" FOREIGN KEY (id) REFERENCES organisations_actors(id) ON DELETE CASCADE not valid;

alter table "public"."organisations_actors_duty" validate constraint "organisations_actors_duty_id_fkey";

alter table "public"."organisations_publication_status" add constraint "organisations_publication_status_organisation_fkey" FOREIGN KEY (organisation) REFERENCES organisations(id) ON DELETE CASCADE not valid;

alter table "public"."organisations_publication_status" validate constraint "organisations_publication_status_organisation_fkey";

alter table "public"."organisations_publication_status" add constraint "organisations_publication_status_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES users(id) ON DELETE SET DEFAULT not valid;

alter table "public"."organisations_publication_status" validate constraint "organisations_publication_status_updated_by_fkey";

alter table "public"."projects_actors" add constraint "projects_actors_actor_fkey" FOREIGN KEY (actor) REFERENCES actors(id) ON DELETE CASCADE not valid;

alter table "public"."projects_actors" validate constraint "projects_actors_actor_fkey";

alter table "public"."projects_actors" add constraint "projects_actors_duty_fkey" FOREIGN KEY (duty) REFERENCES actor_duty(id) ON DELETE SET NULL not valid;

alter table "public"."projects_actors" validate constraint "projects_actors_duty_fkey";

alter table "public"."projects_actors" add constraint "projects_actors_organisation_fkey" FOREIGN KEY (organisation) REFERENCES organisations(id) ON DELETE SET NULL not valid;

alter table "public"."projects_actors" validate constraint "projects_actors_organisation_fkey";

alter table "public"."projects_actors" add constraint "projects_actors_project_fkey" FOREIGN KEY (project) REFERENCES projects(id) ON DELETE CASCADE not valid;

alter table "public"."projects_actors" validate constraint "projects_actors_project_fkey";

alter table "public"."projects_organisations" add constraint "projects_organisations_organisation_fkey" FOREIGN KEY (organisation) REFERENCES organisations(id) ON DELETE CASCADE not valid;

alter table "public"."projects_organisations" validate constraint "projects_organisations_organisation_fkey";

alter table "public"."projects_organisations" add constraint "projects_organisations_project_fkey" FOREIGN KEY (project) REFERENCES projects(id) ON DELETE CASCADE not valid;

alter table "public"."projects_organisations" validate constraint "projects_organisations_project_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.actor_is_public(a_id uuid)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
	begin
		return exists (
			select 1 from actors_publication_status as aps
  			where aps.project = a_id
  			and aps.published is not null
  		);
	end;
$function$
;

create or replace view "public"."explore_projects" as  SELECT p.id,
    p.created_at,
    p.updated_at,
    p.created_by,
    p.updated_by,
    p.title,
    p.description,
    p.site_ownership,
    p.site_area,
    p.interventions_area,
    p.adjacent_streets,
    p.building_area,
    p.implantation_mode,
    p.building_construction_year,
    p.type,
    p.banner,
    p.cost_range,
    p.likes_sum,
    p.building_height,
    p.building_levels_main,
    p.building_levels_basement,
    p.building_levels_mezzanine,
    p.adjacent_alleys,
    p.summary,
    p.building_levels_main_count,
    p.building_levels_basement_count,
    p.building_levels_mezzanine_count,
    p.is_demo,
    pl.obfuscated AS obfuscated_location
   FROM (projects p
     LEFT JOIN projects_location pl ON ((pl.project = p.id)))
  WHERE project_is_public(p.id);


CREATE OR REPLACE FUNCTION public.org_is_public(o_id uuid)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
	begin
		return exists (
			select 1 from organisations_publication_status as ops
  			where ops.project = o_id
  			and ops.published is not null
  		);
	end;
$function$
;

create or replace view "public"."editable_actors" as  SELECT a.id,
    a.created_at,
    a.updated_at,
    a.created_by,
    a.updated_by,
    a.first_name,
    a.last_name,
    a.middle_name,
    a.about
   FROM actors a
  WHERE authorize_actor_update(a.*);


create or replace view "public"."projects_publication_status_fulfill" as  SELECT ps.project,
    ps.updated_at,
    ps.updated_by,
    ps.published,
    ps.requested,
        CASE
            WHEN ((pl.center IS NOT NULL) AND (p.title IS NOT NULL) AND (p.type IS NOT NULL)) THEN true
            ELSE false
        END AS fulfill
   FROM ((projects_publication_status ps
     LEFT JOIN projects_location pl ON ((pl.project = ps.project)))
     LEFT JOIN projects p ON ((p.id = ps.project)));



