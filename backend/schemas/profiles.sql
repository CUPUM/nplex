-- Roles table
drop table if exists user_roles;

create table user_roles (
	id int generated by default as identity,
	role text not null,
	primary key (id),
	unique (id),
	unique (role)
);

insert into user_roles (role)
values ("visitor"),
	("editor"),
	("admin");

-- Main table
drop table if exists user_profiles;

create table users_profiles (
	user_id uuid references auth.users not null,
	inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
	updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
	is_online boolean,
	role_id uuid references user_roles not null,
	username text unique not null,
	firstname text,
	middlename text,
	lastname text,
	about text,
	primary key (user_id),
	unique
);

-- Users' collections of saved / liked projects
create table users_collections () -- Users' saved queries
create table users_queries () -- Create a table for authed user's profiles
create table user_profiles (
	id uuid references auth.users not null,
	updated_at timestamp with time zone,
	username text unique,
	firstname text,
	lastname text,
	-- avatar_url text,
	-- website text,
	primary key (id),
	unique(username),
	constraint username_length check (char_length(username) >= 3)
);

alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles for
select using (true);

create policy "Users can insert their own profile." on profiles for
insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles for
update using (auth.uid() = id);

-- Set up Realtime!
begin;

drop publication if exists supabase_realtime;

create publication supabase_realtime;

commit;

alter publication supabase_realtime
add table profiles;

-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');

create policy "Avatar images are publicly accessible." on storage.objects for
select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects for
insert with check (bucket_id = 'avatars');

create policy "Anyone can update an avatar." on storage.objects for
update with check (bucket_id = 'avatars');