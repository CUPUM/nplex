-- DROP TABLES


-- USER ROLES

create or replace type public.user_role as enum ('admin', 'editor', 'visitor');


-- USERS PROFILES

create table public.profiles (
	id uuid references auth.users on delete cascade not null primary key unique,
	created_at timestamptz default timezone('utc'::text, now()) not null,
	updated_at timestamptz default timezone('utc'::text, now()) not null,
	role public.user_role default 'visitor' not null,
	is_online boolean not null default false,
	show_email boolean not null default false,
	firstname text,
	middlename text,
	lastname text,
	about text
);

comment on table public.users_profiles is 'Base data table for user profiles, extending the default supabase auth.users table.';

alter table public.profiles enable row level security;

create policy 'Anyone can see user profiles'
	on public.profiles for select
	using ( true );

create policy 'Users can only update their own profile'
	on public.profiles for update
	using ( auth.uid() = id );


-- AUTOMATE PROFILE CREATION ON NEW USER SIGNUP

create or replace function public.handle_new_user()
returns trigger as $$
begin
	insert into public.profiles
		( id )
	values
		( new.id );
	return new;
end;
$$ language plpgsql security definer;
create or replace trigger on_new_user
	after insert on auth.users
	for each row execute procedure public.handle_new_user();


-- PROJECTS

create table public.projects (
	id int generated by default as identity primary key unique,
	created_at timestamptz default timezone('utc'::text, now()) not null,
	updated_at timestamptz default timezone('utc'::text, now()) not null,
	creator_id int references public.users_profiles not null,
	is_published boolean default false not null,
	awaiting_approval boolean default false not null,
	title text not null unique,
	description text
);

alter table public.projects enable row level security;

create policy 'Anyone can see published projects.'
	on public.projects for select
	using ( is_published );

create policy 'Authed users can create unpublished projects.'
	on public.projects for insert
	with check ( auth.role() = 'authenticated' );

create policy 'Only editors and admins can publish projects.'
	on public.projects for update
	using ( 
		select role from public.profiles
		where public.profiles.id = auth.uid()
	 )
	with check (  );

create policy 'Project creators that are NOT VISITORS can do anything to their projects regardless of publication state.'
	on public.projects for all
	using (
		auth.uid() = creator_id
	);

create or replace view public.projects_unpublishable as ...;

create policy 'Visitor-creators can do anything to their unpublishable projects.'
	on public.projects for all
	using (
		auth.uid() = creator_id
	);

create table public.projects_editors (
	id int generated by default as identity primary key unique, 
	project_id int references public.projects on delete cascade not null,
	user_id uuid references auth.users on delete cascade not null,
	unique ( project_id, user_id )
);

alter table public.projects_editors enable row level security;

create policy 'Anyone can see project editors for projects they can normally see.'
	on public.projects_editors for select
	using (
		exists (
			select 1 from public.projects
			where public.projects.id = public.projects_editors.project_id
		)
	);

create policy 'Non-creator editors can do anything on assigned projects.'
	on public.projects for all
	using (
		exists (
			select 1 from public.projects_permissions
			where public.projects_permissions.project_id = public.projects.id
			and public.projects_permissions.user_id = auth.uid()
		)
	)
	with check (
		exists (
			select 1 from public.projects_permissions
			where public.projects_permissions.project_id = public.projects.id
			and public.projects_permissions.user_id = auth.uid()
		)
	);


-- PROJECTS RATINGS

create table public.projects_ratings (
	id int generated by default as identity primary key unique,
	user_id uuid references auth.users on delete cascade not null,
	project_id int references public.projects on delete cascade not null,
	rating int references public.project_rating_enum not null check ( rating >= 0 and rating <= 5),
	unique ( project_id, user_id )
);

alter table public.projects_ratings enable row level security;

create policy 'Anyone can see projects ratings for projects they can normally see.'
	on public.projects_ratings for select
	using (
		exists (
			select 1 from public.projects
		)
	);

create policy 'Only authenticated users can rate projects they can normally see.'
	on public.projects_ratings for update
	using ( auth.role() = 'authenticated' )
	with check ( auth.role() = 'authenticated' );

create policy 'Authed users can remove their own ratings.'
	on public.projects_ratings for delete
	using ( auth.uid() = user_id );


-- USERS PROJECTS COLLECTIONS

create table public.users_collections (
	id int generated by default as identity primary key unique,
	user_id uuid references auth.users on delete cascade not null,
	created_at timestamptz default timezone('utc'::text, now()) not null,
	updated_at timestamptz default timezone('utc'::text, now()) not null,
	title text not null,
	description text
);

alter table public.users_collections enable row level security;

create policy 'Anyone can see collections'
	on public.users_collections
	for select
	using ( true );

create policy 'Only authed users can create collections'
	on public.users_collections
	for insert
	using ( auth.role() = 'authenticated' );

create policy 'Users can only update collections they own'
	on public.users_collections
	for update
	using ( auth.uid() = user_id )
	with check ( auth.uid() = user_id );

create table public.users_collections_items (
	id int generated by default as identity primary key unique,
	user_id uuid references auth.users on delete cascade not null,
	created_at timestamptz default timezone('utc'::text, now()) not null,
	user_collection_id int references public.users_collections on delete cascade not null,
	project_id int references public.projects on delete cascade not null
);

alter table public.users_collections_items enable row level security;

create policy 'Anyone can see collections'
	on public.users_collections_items
	for select
	using ( true );

create policy 'Only authed users can create collections'
	on public.users_collections
	for insert
	using ( auth.role() = 'authenticated' );

create policy 'Users can only update collections they own'
	on public.users_collections
	for update
	using ( auth.uid() = user_id );