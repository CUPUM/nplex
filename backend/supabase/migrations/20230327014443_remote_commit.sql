drop policy "Anyone can see works of published projects" on "public"."projects_works";

drop policy "Project maintainers can do all" on "public"."projects_works";

alter table "public"."projects_works" drop constraint "projects_works_created_by_fkey";

alter table "public"."projects_works" drop constraint "projects_works_project_fkey";

alter table "public"."projects_works" drop constraint "projects_works_un";

alter table "public"."projects_works" drop constraint "projects_works_updated_by_fkey";

alter table "public"."projects_works" drop constraint "projects_works_work_fkey";

alter table "public"."users_projects_likes" drop constraint "users_projects_likes_project_id_fkey";

alter table "public"."users_projects_likes" drop constraint "users_projects_likes_un";

alter table "public"."users_projects_likes" drop constraint "users_projects_likes_user_id_fkey";

alter table "public"."projects_works" drop constraint "projects_works_pkey";

alter table "public"."users_projects_likes" drop constraint "users_projects_likes_pkey";

drop index if exists "public"."projects_works_pkey";

drop index if exists "public"."projects_works_un";

drop index if exists "public"."users_projects_likes_pkey";

drop index if exists "public"."users_projects_likes_un";

drop table "public"."projects_works";

drop table "public"."users_projects_likes";

create table "public"."projects_interventions" (
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "project" uuid not null,
    "created_by" uuid not null default default_uid(),
    "updated_by" uuid not null default default_uid(),
    "intervention" smallint not null
);


alter table "public"."projects_interventions" enable row level security;

create table "public"."projects_likes" (
    "id" integer generated by default as identity not null,
    "user" uuid not null default auth.uid(),
    "project" uuid not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."projects_likes" enable row level security;

CREATE UNIQUE INDEX projects_interventions_pkey ON public.projects_interventions USING btree (project, intervention);

CREATE UNIQUE INDEX projects_interventions_un ON public.projects_interventions USING btree (project, intervention);

CREATE UNIQUE INDEX users_projects_likes_pkey ON public.projects_likes USING btree (project, "user");

CREATE UNIQUE INDEX users_projects_likes_un ON public.projects_likes USING btree ("user", project);

alter table "public"."projects_interventions" add constraint "projects_interventions_pkey" PRIMARY KEY using index "projects_interventions_pkey";

alter table "public"."projects_likes" add constraint "users_projects_likes_pkey" PRIMARY KEY using index "users_projects_likes_pkey";

alter table "public"."projects_interventions" add constraint "projects_interventions_created_by_fkey" FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE SET DEFAULT not valid;

alter table "public"."projects_interventions" validate constraint "projects_interventions_created_by_fkey";

alter table "public"."projects_interventions" add constraint "projects_interventions_intervention_fkey" FOREIGN KEY (intervention) REFERENCES project_intervention(id) ON DELETE CASCADE not valid;

alter table "public"."projects_interventions" validate constraint "projects_interventions_intervention_fkey";

alter table "public"."projects_interventions" add constraint "projects_interventions_project_fkey" FOREIGN KEY (project) REFERENCES projects(id) ON DELETE CASCADE not valid;

alter table "public"."projects_interventions" validate constraint "projects_interventions_project_fkey";

alter table "public"."projects_interventions" add constraint "projects_interventions_un" UNIQUE using index "projects_interventions_un";

alter table "public"."projects_interventions" add constraint "projects_interventions_updated_by_fkey" FOREIGN KEY (updated_by) REFERENCES users(id) ON DELETE SET DEFAULT not valid;

alter table "public"."projects_interventions" validate constraint "projects_interventions_updated_by_fkey";

alter table "public"."projects_likes" add constraint "projects_likes_project_fkey" FOREIGN KEY (project) REFERENCES projects(id) not valid;

alter table "public"."projects_likes" validate constraint "projects_likes_project_fkey";

alter table "public"."projects_likes" add constraint "projects_likes_user_fkey" FOREIGN KEY ("user") REFERENCES users(id) not valid;

alter table "public"."projects_likes" validate constraint "projects_likes_user_fkey";

alter table "public"."projects_likes" add constraint "users_projects_likes_un" UNIQUE using index "users_projects_likes_un";

create or replace view "public"."projects_likes_count" as  SELECT p.id,
    count(l.project) AS count
   FROM (projects p
     LEFT JOIN projects_likes l ON ((p.id = l.project)))
  GROUP BY p.id;


create policy "Anyone can see works of published projects"
on "public"."projects_interventions"
as permissive
for select
to public
using (project_is_public(project));


create policy "Project maintainers can do all"
on "public"."projects_interventions"
as permissive
for all
to public
using (authorize_project_update(project))
with check (authorize_project_update(project));


create policy "Anyone can select likes"
on "public"."projects_likes"
as permissive
for select
to public
using (true);


create policy "Users can only add likes for themselves"
on "public"."projects_likes"
as permissive
for insert
to public
with check ((auth.uid() = (USER)::uuid));


create policy "Users can only delete their own likes"
on "public"."projects_likes"
as permissive
for delete
to public
using ((auth.uid() = (USER)::uuid));



