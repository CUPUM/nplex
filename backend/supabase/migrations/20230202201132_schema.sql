comment on schema public is e'@graphql({"inflect_names": true})';

create or replace function public.get_relegate_uid()
 returns uuid
 language plpgsql
 security definer
as $function$
begin

    return (
        select (user_id) from public.users_roles
        where role = 'nplex'::public.app_role
        limit 1
    );

end;
$function$
;

create or replace function public.default_uid()
 returns uuid
 language plpgsql
 security definer
as $function$
begin

    return (
        select coalesce(
            auth.uid(),
            public.get_relegate_uid(),
            null
        )
    );

end;
$function$
;

create table "public"."actors" (
    "id" uuid not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_by_id" uuid not null default default_uid(),
    "first_name" text not null,
    "last_name" text,
    "middle_name" text,
    "about" text
);


create table "public"."notifications" (
    "id" uuid not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_by_id" uuid default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "title" text,
    "body" text not null,
    "expiry" timestamp with time zone
);


alter table "public"."notifications" enable row level security;

create table "public"."organizations" (
    "id" uuid not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid not null default default_uid(),
    "name" text not null,
    "short_name" text,
    "about" text
);


create table "public"."project_event_type" (
    "id" smallint generated by default as identity not null,
    "title" text not null,
    "description" text,
    "durative" boolean not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid default default_uid()
);


alter table "public"."project_event_type" enable row level security;

create table "public"."project_event_type_subevent_type" (
    "id" smallint generated by default as identity not null,
    "event_type_id" smallint not null,
    "subevent_type_id" smallint not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid default default_uid()
);


alter table "public"."project_event_type_subevent_type" enable row level security;

create table "public"."project_exemplarity_indicator" (
    "id" smallint generated by default as identity not null,
    "title" text not null,
    "description" text,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_by_id" uuid default default_uid(),
    "indicator_category_id" smallint
);


alter table "public"."project_exemplarity_indicator" enable row level security;

create table "public"."project_exemplarity_indicator_category" (
    "id" smallint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "title" text not null,
    "description" text,
    "created_by_id" uuid not null default default_uid(),
    "updated_by_id" uuid default default_uid()
);


alter table "public"."project_exemplarity_indicator_category" enable row level security;

create table "public"."project_implantation_mode" (
    "id" smallint generated by default as identity not null,
    "title" text not null,
    "description" text,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid default default_uid()
);


alter table "public"."project_implantation_mode" enable row level security;

create table "public"."project_material_origin" (
    "id" smallint generated by default as identity not null,
    "title" text not null,
    "label" text not null,
    "description" text,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid default default_uid()
);


alter table "public"."project_material_origin" enable row level security;

create table "public"."project_material_type" (
    "id" integer generated by default as identity not null,
    "title" text not null,
    "description" text,
    "combustible" boolean not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid default default_uid()
);


alter table "public"."project_material_type" enable row level security;

create table "public"."project_material_use" (
    "id" integer generated by default as identity not null,
    "title" text not null,
    "description" text,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid default default_uid()
);


alter table "public"."project_material_use" enable row level security;

create table "public"."project_site_ownership" (
    "id" smallint generated by default as identity not null,
    "title" text not null,
    "description" text,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid default default_uid()
);


alter table "public"."project_site_ownership" enable row level security;

create table "public"."project_site_usage" (
    "id" smallint generated by default as identity not null,
    "title" text not null,
    "description" text,
    "is_building" boolean not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid default default_uid()
);


alter table "public"."project_site_usage" enable row level security;

create table "public"."project_site_usage_category" (
    "id" smallint generated by default as identity not null,
    "title" text not null,
    "description" text,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid default default_uid()
);


alter table "public"."project_site_usage_category" enable row level security;

create table "public"."project_site_usage_site_usage_category" (
    "usage_id" smallint not null,
    "category_id" smallint not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid default default_uid()
);


alter table "public"."project_site_usage_site_usage_category" enable row level security;

create table "public"."project_type" (
    "id" smallint generated by default as identity not null,
    "title" text not null,
    "description" text,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid not null default default_uid()
);


alter table "public"."project_type" enable row level security;

create table "public"."project_type_work" (
    "type_id" smallint not null,
    "work_id" smallint not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid not null default default_uid()
);


alter table "public"."project_type_work" enable row level security;

create table "public"."project_work" (
    "id" smallint generated by default as identity not null,
    "title" text not null,
    "description" text,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid not null default default_uid()
);


alter table "public"."project_work" enable row level security;

create table "public"."projects" (
    "id" uuid not null default uuid_generate_v4(),
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_by_id" uuid not null default default_uid(),
    "title" text not null,
    "description" text,
    "site_ownership_id" smallint,
    "site_usage_category_id" smallint,
    "site_usage_id" smallint,
    "site_area" numeric,
    "area" numeric,
    "adjacent_streets" smallint,
    "building_area" numeric,
    "implantation_mode_id" smallint,
    "building_construction_year" smallint,
    "type_id" smallint,
    "banner_id" uuid,
    "cost_range" numrange not null default 'empty'::numrange,
    "likes_sum" integer not null default 0
);


alter table "public"."projects" enable row level security;

create table "public"."projects_events" (
    "id" uuid not null default uuid_generate_v4(),
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_by_id" uuid not null default default_uid(),
    "project_id" uuid not null,
    "type_id" smallint not null,
    "parent_id" uuid,
    "title" text not null,
    "description" text,
    "start_date" timestamp with time zone not null,
    "end_date" timestamp with time zone
);


alter table "public"."projects_events" enable row level security;

create table "public"."projects_events_ressources" (
    "id" uuid not null default uuid_generate_v4(),
    "event_id" uuid not null,
    "project_id" uuid not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_by_id" uuid not null default default_uid(),
    "title" text not null,
    "description" text,
    "url" text
);


create table "public"."projects_exemplarity_indicators" (
    "id" uuid not null default uuid_generate_v4(),
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_by_id" uuid not null default default_uid(),
    "project_id" uuid not null,
    "exemplarity_indicator_id" smallint not null,
    "description" text
);


alter table "public"."projects_exemplarity_indicators" enable row level security;

create table "public"."projects_images" (
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_by_id" uuid not null default default_uid(),
    "title" text,
    "description" text,
    "order" smallint,
    "project_id" uuid not null,
    "name" text not null,
    "id" uuid not null,
    "color_dominant_hsl" cube,
    "color_dominant_lab" cube,
    "color_mean_hsl" cube,
    "color_mean_lab" cube
);


alter table "public"."projects_images" enable row level security;

create table "public"."projects_location" (
    "created_at" timestamp with time zone not null default now(),
    "project_id" uuid not null,
    "updated_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_by_id" uuid not null default default_uid(),
    "geometry" geometry,
    "radius" real
);


alter table "public"."projects_location" enable row level security;

create table "public"."projects_materials" (
    "id" uuid not null default uuid_generate_v4(),
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_by_id" uuid not null default default_uid(),
    "project_id" uuid not null,
    "material_type_id" integer not null,
    "origin_id" smallint,
    "sustainability" numeric(1,1),
    "description" text
);


create table "public"."projects_materials_uses" (
    "id" integer generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_by_id" uuid not null default default_uid(),
    "project_id" uuid not null,
    "project_material_id" uuid not null,
    "material_use_id" integer not null,
    "description" text
);


create table "public"."projects_programs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid not null default default_uid(),
    "project_id" uuid not null,
    "title" text not null,
    "description" text
);


create table "public"."projects_publication_status" (
    "project_id" uuid not null,
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid not null default default_uid(),
    "status" publication_status not null default 'unpublished'::publication_status
);


alter table "public"."projects_publication_status" enable row level security;

create table "public"."projects_secondary_usages" (
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "created_by_id" uuid default default_uid(),
    "updated_by_id" uuid default default_uid(),
    "usage_id" smallint not null,
    "category_id" smallint not null,
    "project_id" uuid not null
);


alter table "public"."projects_secondary_usages" enable row level security;

create table "public"."projects_users" (
    "project_id" uuid not null,
    "user_id" uuid not null,
    "created_at" timestamp with time zone not null default now(),
    "granted_role" app_role not null default 'editor'::app_role,
    "updated_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_by_id" uuid not null default default_uid()
);


create table "public"."projects_works" (
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "project_id" uuid not null,
    "created_by_id" uuid not null default default_uid(),
    "updated_by_id" uuid not null default default_uid(),
    "work_id" smallint not null
);


create table "public"."role_details" (
    "role" app_role not null,
    "description" text not null,
    "title" text not null
);


alter table "public"."role_details" enable row level security;

create table "public"."role_permissions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "role" app_role not null,
    "permission" app_permission not null
);


alter table "public"."role_permissions" enable row level security;

create table "public"."users" (
    "id" uuid not null,
    "updated_at" timestamp with time zone not null default now(),
    "avatar_url" text,
    "about" text,
    "public_email" character varying(128),
    "updated_by_id" uuid not null,
    "first_name" character varying(48),
    "last_name" text,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."users" enable row level security;

create table "public"."users_notifications" (
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "notification_id" uuid not null
);


alter table "public"."users_notifications" enable row level security;

create table "public"."users_projects_collections" (
    "id" uuid not null default uuid_generate_v4(),
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "is_public" boolean not null default true,
    "title" text not null,
    "description" text,
    "updated_by_id" uuid default default_uid()
);


create table "public"."users_projects_collections_items" (
    "id" integer generated by default as identity not null,
    "created_by_id" uuid not null default auth.uid(),
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "collection_id" uuid not null,
    "project_id" uuid not null,
    "description" text,
    "updated_by_id" uuid not null default default_uid()
);


create table "public"."users_projects_likes" (
    "id" integer generated by default as identity not null,
    "user_id" uuid not null default auth.uid(),
    "project_id" uuid not null,
    "created_at" timestamp with time zone not null default now()
);


create table "public"."users_projects_queries" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by_id" uuid not null default default_uid(),
    "updated_at" timestamp with time zone not null default now(),
    "updated_by_id" uuid not null default default_uid(),
    "query" jsonb not null,
    "title" text not null,
    "description" text
);


create table "public"."users_roles" (
    "user_id" uuid not null,
    "updated_at" timestamp with time zone not null default now(),
    "role" app_role not null default 'visitor'::app_role,
    "updated_by_id" uuid not null default default_uid(),
    "request" app_role,
    "requested_at" timestamp with time zone
);


alter table "public"."users_roles" enable row level security;

create unique index actors_pkey on public.actors using btree (id);

create unique index app_role_details_label_key on public.role_details using btree (title);

create unique index app_role_details_pkey on public.role_details using btree (role);

create unique index notifications_pkey on public.notifications using btree (id);

create unique index organizations_pkey on public.organizations using btree (id);

create unique index project_category_pkey on public.project_type using btree (id);

create unique index project_category_un on public.project_type using btree (title);

create unique index project_event_type_pkey on public.project_event_type using btree (id);

create unique index project_event_type_subevent_type_pkey on public.project_event_type_subevent_type using btree (event_type_id, subevent_type_id);

create unique index project_event_type_subevent_type_un on public.project_event_type_subevent_type using btree (event_type_id, subevent_type_id);

create unique index project_event_type_un on public.project_event_type using btree (title);

create unique index project_exemplarity_indicator_category_pkey on public.project_exemplarity_indicator_category using btree (id);

create unique index project_exemplarity_indicator_category_un on public.project_exemplarity_indicator_category using btree (title);

create unique index project_exemplarity_indicator_pkey on public.project_exemplarity_indicator using btree (id);

create unique index project_exemplarity_indicator_un on public.project_exemplarity_indicator using btree (title);

create unique index project_implantation_mode_pkey on public.project_implantation_mode using btree (id);

create unique index project_implantation_mode_un on public.project_implantation_mode using btree (title);

create unique index project_material_origin_pkey on public.project_material_origin using btree (id);

create unique index project_material_origin_un on public.project_material_origin using btree (title);

create unique index project_material_type_pkey on public.project_material_type using btree (id);

create unique index project_material_type_un on public.project_material_type using btree (title);

create unique index project_material_use_pkey on public.project_material_use using btree (id);

create unique index project_material_use_un on public.project_material_use using btree (title);

create unique index project_site_ownership_pkey on public.project_site_ownership using btree (id);

create unique index project_site_ownership_un on public.project_site_ownership using btree (title);

create unique index project_site_usage_category_pkey on public.project_site_usage_category using btree (id);

create unique index project_site_usage_category_un on public.project_site_usage_category using btree (title);

create unique index project_site_usage_pkey on public.project_site_usage using btree (id);

create unique index project_site_usage_site_usage_category_pkey on public.project_site_usage_site_usage_category using btree (usage_id, category_id);

create unique index project_site_usage_site_usage_category_un on public.project_site_usage_site_usage_category using btree (usage_id, category_id);

create unique index project_site_usage_un on public.project_site_usage using btree (title);

create unique index project_type_category_un on public.project_type_work using btree (work_id, type_id);

create unique index project_type_pkey on public.project_work using btree (id);

create unique index project_type_un on public.project_work using btree (title);

create unique index project_type_work_pkey on public.project_type_work using btree (type_id, work_id);

create unique index projects_images_order_un on public.projects_images using btree (project_id, "order");

create unique index projects_images_pkey on public.projects_images using btree (id);

create unique index projects_location_pkey on public.projects_location using btree (project_id);

create unique index projects_pkey on public.projects using btree (id);

create unique index projects_publication_status_pkey on public.projects_publication_status using btree (project_id);

create unique index projects_secondary_usages_pkey on public.projects_secondary_usages using btree (usage_id, category_id, project_id);

create unique index projects_users_pkey on public.projects_users using btree (project_id, user_id);

create unique index projects_works_pkey on public.projects_works using btree (project_id, work_id);

create unique index projects_works_un on public.projects_works using btree (project_id, work_id);

create unique index role_permission_pkey on public.role_permissions using btree (id);

create unique index role_permissions_un on public.role_permissions using btree (role, permission);

create unique index users_notifications_pkey on public.users_notifications using btree (user_id, notification_id);

create unique index users_pkey on public.users using btree (id);

create unique index users_projects_collections_pkey on public.users_projects_collections using btree (id);

create unique index users_projects_likes_pkey on public.users_projects_likes using btree (project_id, user_id);

create unique index users_projects_likes_un on public.users_projects_likes using btree (user_id, project_id);

create unique index users_queries_pkey on public.users_projects_queries using btree (id);

create unique index users_roles_pkey on public.users_roles using btree (user_id, role);

create unique index users_roles_un on public.users_roles using btree (user_id);

create unique index users_un on public.users using btree (id);

alter table "public"."actors" add constraint "actors_pkey" primary key using index "actors_pkey";

alter table "public"."notifications" add constraint "notifications_pkey" primary key using index "notifications_pkey";

alter table "public"."organizations" add constraint "organizations_pkey" primary key using index "organizations_pkey";

alter table "public"."project_event_type" add constraint "project_event_type_pkey" primary key using index "project_event_type_pkey";

alter table "public"."project_event_type_subevent_type" add constraint "project_event_type_subevent_type_pkey" primary key using index "project_event_type_subevent_type_pkey";

alter table "public"."project_exemplarity_indicator" add constraint "project_exemplarity_indicator_pkey" primary key using index "project_exemplarity_indicator_pkey";

alter table "public"."project_exemplarity_indicator_category" add constraint "project_exemplarity_indicator_category_pkey" primary key using index "project_exemplarity_indicator_category_pkey";

alter table "public"."project_implantation_mode" add constraint "project_implantation_mode_pkey" primary key using index "project_implantation_mode_pkey";

alter table "public"."project_material_origin" add constraint "project_material_origin_pkey" primary key using index "project_material_origin_pkey";

alter table "public"."project_material_type" add constraint "project_material_type_pkey" primary key using index "project_material_type_pkey";

alter table "public"."project_material_use" add constraint "project_material_use_pkey" primary key using index "project_material_use_pkey";

alter table "public"."project_site_ownership" add constraint "project_site_ownership_pkey" primary key using index "project_site_ownership_pkey";

alter table "public"."project_site_usage" add constraint "project_site_usage_pkey" primary key using index "project_site_usage_pkey";

alter table "public"."project_site_usage_category" add constraint "project_site_usage_category_pkey" primary key using index "project_site_usage_category_pkey";

alter table "public"."project_site_usage_site_usage_category" add constraint "project_site_usage_site_usage_category_pkey" primary key using index "project_site_usage_site_usage_category_pkey";

alter table "public"."project_type" add constraint "project_category_pkey" primary key using index "project_category_pkey";

alter table "public"."project_type_work" add constraint "project_type_work_pkey" primary key using index "project_type_work_pkey";

alter table "public"."project_work" add constraint "project_type_pkey" primary key using index "project_type_pkey";

alter table "public"."projects" add constraint "projects_pkey" primary key using index "projects_pkey";

alter table "public"."projects_images" add constraint "projects_images_pkey" primary key using index "projects_images_pkey";

alter table "public"."projects_location" add constraint "projects_location_pkey" primary key using index "projects_location_pkey";

alter table "public"."projects_publication_status" add constraint "projects_publication_status_pkey" primary key using index "projects_publication_status_pkey";

alter table "public"."projects_secondary_usages" add constraint "projects_secondary_usages_pkey" primary key using index "projects_secondary_usages_pkey";

alter table "public"."projects_users" add constraint "projects_users_pkey" primary key using index "projects_users_pkey";

alter table "public"."projects_works" add constraint "projects_works_pkey" primary key using index "projects_works_pkey";

alter table "public"."role_details" add constraint "app_role_details_pkey" primary key using index "app_role_details_pkey";

alter table "public"."role_permissions" add constraint "role_permission_pkey" primary key using index "role_permission_pkey";

alter table "public"."users" add constraint "users_pkey" primary key using index "users_pkey";

alter table "public"."users_notifications" add constraint "users_notifications_pkey" primary key using index "users_notifications_pkey";

alter table "public"."users_projects_collections" add constraint "users_projects_collections_pkey" primary key using index "users_projects_collections_pkey";

alter table "public"."users_projects_likes" add constraint "users_projects_likes_pkey" primary key using index "users_projects_likes_pkey";

alter table "public"."users_projects_queries" add constraint "users_queries_pkey" primary key using index "users_queries_pkey";

alter table "public"."users_roles" add constraint "users_roles_pkey" primary key using index "users_roles_pkey";

alter table "public"."actors" add constraint "actors_created_by_id_fkey" foreign key (created_by_id) references users(id) not valid;

alter table "public"."actors" validate constraint "actors_created_by_id_fkey";

alter table "public"."actors" add constraint "actors_updated_by_id_fkey" foreign key (updated_by_id) references users(id) not valid;

alter table "public"."actors" validate constraint "actors_updated_by_id_fkey";

alter table "public"."notifications" add constraint "notifications_created_by_id_fkey" foreign key (created_by_id) references auth.users(id) not valid;

alter table "public"."notifications" validate constraint "notifications_created_by_id_fkey";

alter table "public"."notifications" add constraint "notifications_id_fkey" foreign key (id) references users(id) not valid;

alter table "public"."notifications" validate constraint "notifications_id_fkey";

alter table "public"."notifications" add constraint "notifications_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) not valid;

alter table "public"."notifications" validate constraint "notifications_updated_by_id_fkey";

alter table "public"."organizations" add constraint "organizations_created_by_id_fkey" foreign key (created_by_id) references users(id) not valid;

alter table "public"."organizations" validate constraint "organizations_created_by_id_fkey";

alter table "public"."organizations" add constraint "organizations_updated_by_id_fkey" foreign key (updated_by_id) references users(id) not valid;

alter table "public"."organizations" validate constraint "organizations_updated_by_id_fkey";

alter table "public"."project_event_type" add constraint "project_event_type_created_by_id_fkey" foreign key (created_by_id) references auth.users(id) not valid;

alter table "public"."project_event_type" validate constraint "project_event_type_created_by_id_fkey";

alter table "public"."project_event_type" add constraint "project_event_type_un" unique using index "project_event_type_un";

alter table "public"."project_event_type" add constraint "project_event_type_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) not valid;

alter table "public"."project_event_type" validate constraint "project_event_type_updated_by_id_fkey";

alter table "public"."project_event_type_subevent_type" add constraint "project_event_type_subevent_type_created_by_id_fkey" foreign key (created_by_id) references auth.users(id) not valid;

alter table "public"."project_event_type_subevent_type" validate constraint "project_event_type_subevent_type_created_by_id_fkey";

alter table "public"."project_event_type_subevent_type" add constraint "project_event_type_subevent_type_un" unique using index "project_event_type_subevent_type_un";

alter table "public"."project_event_type_subevent_type" add constraint "project_event_type_subevent_type_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) not valid;

alter table "public"."project_event_type_subevent_type" validate constraint "project_event_type_subevent_type_updated_by_id_fkey";

alter table "public"."project_exemplarity_indicator" add constraint "project_exemplarity_indicator_created_by_id_fkey" foreign key (created_by_id) references auth.users(id) not valid;

alter table "public"."project_exemplarity_indicator" validate constraint "project_exemplarity_indicator_created_by_id_fkey";

alter table "public"."project_exemplarity_indicator" add constraint "project_exemplarity_indicator_indicator_category_id_fkey" foreign key (indicator_category_id) references project_exemplarity_indicator_category(id) not valid;

alter table "public"."project_exemplarity_indicator" validate constraint "project_exemplarity_indicator_indicator_category_id_fkey";

alter table "public"."project_exemplarity_indicator" add constraint "project_exemplarity_indicator_un" unique using index "project_exemplarity_indicator_un";

alter table "public"."project_exemplarity_indicator" add constraint "project_exemplarity_indicator_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) not valid;

alter table "public"."project_exemplarity_indicator" validate constraint "project_exemplarity_indicator_updated_by_id_fkey";

alter table "public"."project_exemplarity_indicator_category" add constraint "project_exemplarity_indicator_category_created_by_id_fkey" foreign key (created_by_id) references auth.users(id) not valid;

alter table "public"."project_exemplarity_indicator_category" validate constraint "project_exemplarity_indicator_category_created_by_id_fkey";

alter table "public"."project_exemplarity_indicator_category" add constraint "project_exemplarity_indicator_category_un" unique using index "project_exemplarity_indicator_category_un";

alter table "public"."project_exemplarity_indicator_category" add constraint "project_exemplarity_indicator_category_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) not valid;

alter table "public"."project_exemplarity_indicator_category" validate constraint "project_exemplarity_indicator_category_updated_by_id_fkey";

alter table "public"."project_implantation_mode" add constraint "project_implantation_mode_created_by_id_fkey" foreign key (created_by_id) references auth.users(id) not valid;

alter table "public"."project_implantation_mode" validate constraint "project_implantation_mode_created_by_id_fkey";

alter table "public"."project_implantation_mode" add constraint "project_implantation_mode_un" unique using index "project_implantation_mode_un";

alter table "public"."project_implantation_mode" add constraint "project_implantation_mode_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) not valid;

alter table "public"."project_implantation_mode" validate constraint "project_implantation_mode_updated_by_id_fkey";

alter table "public"."project_material_origin" add constraint "project_material_origin_created_by_id_fkey" foreign key (created_by_id) references auth.users(id) not valid;

alter table "public"."project_material_origin" validate constraint "project_material_origin_created_by_id_fkey";

alter table "public"."project_material_origin" add constraint "project_material_origin_un" unique using index "project_material_origin_un";

alter table "public"."project_material_origin" add constraint "project_material_origin_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) not valid;

alter table "public"."project_material_origin" validate constraint "project_material_origin_updated_by_id_fkey";

alter table "public"."project_material_type" add constraint "project_material_type_created_by_id_fkey" foreign key (created_by_id) references auth.users(id) not valid;

alter table "public"."project_material_type" validate constraint "project_material_type_created_by_id_fkey";

alter table "public"."project_material_type" add constraint "project_material_type_un" unique using index "project_material_type_un";

alter table "public"."project_material_type" add constraint "project_material_type_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) not valid;

alter table "public"."project_material_type" validate constraint "project_material_type_updated_by_id_fkey";

alter table "public"."project_material_use" add constraint "project_material_use_created_by_id_fkey" foreign key (created_by_id) references auth.users(id) not valid;

alter table "public"."project_material_use" validate constraint "project_material_use_created_by_id_fkey";

alter table "public"."project_material_use" add constraint "project_material_use_un" unique using index "project_material_use_un";

alter table "public"."project_material_use" add constraint "project_material_use_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) not valid;

alter table "public"."project_material_use" validate constraint "project_material_use_updated_by_id_fkey";

alter table "public"."project_site_ownership" add constraint "project_site_ownership_created_by_id_fkey" foreign key (created_by_id) references auth.users(id) not valid;

alter table "public"."project_site_ownership" validate constraint "project_site_ownership_created_by_id_fkey";

alter table "public"."project_site_ownership" add constraint "project_site_ownership_un" unique using index "project_site_ownership_un";

alter table "public"."project_site_ownership" add constraint "project_site_ownership_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) not valid;

alter table "public"."project_site_ownership" validate constraint "project_site_ownership_updated_by_id_fkey";

alter table "public"."project_site_usage" add constraint "project_site_usage_created_by_id_fkey" foreign key (created_by_id) references auth.users(id) not valid;

alter table "public"."project_site_usage" validate constraint "project_site_usage_created_by_id_fkey";

alter table "public"."project_site_usage" add constraint "project_site_usage_un" unique using index "project_site_usage_un";

alter table "public"."project_site_usage" add constraint "project_site_usage_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) not valid;

alter table "public"."project_site_usage" validate constraint "project_site_usage_updated_by_id_fkey";

alter table "public"."project_site_usage_category" add constraint "project_site_usage_category_created_by_id_fkey" foreign key (created_by_id) references auth.users(id) not valid;

alter table "public"."project_site_usage_category" validate constraint "project_site_usage_category_created_by_id_fkey";

alter table "public"."project_site_usage_category" add constraint "project_site_usage_category_un" unique using index "project_site_usage_category_un";

alter table "public"."project_site_usage_category" add constraint "project_site_usage_category_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) not valid;

alter table "public"."project_site_usage_category" validate constraint "project_site_usage_category_updated_by_id_fkey";

alter table "public"."project_site_usage_site_usage_category" add constraint "project_site_usage_site_usage_category_created_by_id_fkey" foreign key (created_by_id) references auth.users(id) not valid;

alter table "public"."project_site_usage_site_usage_category" validate constraint "project_site_usage_site_usage_category_created_by_id_fkey";

alter table "public"."project_site_usage_site_usage_category" add constraint "project_site_usage_site_usage_category_un" unique using index "project_site_usage_site_usage_category_un";

alter table "public"."project_site_usage_site_usage_category" add constraint "project_site_usage_site_usage_category_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) not valid;

alter table "public"."project_site_usage_site_usage_category" validate constraint "project_site_usage_site_usage_category_updated_by_id_fkey";

alter table "public"."project_type" add constraint "project_category_un" unique using index "project_category_un";

alter table "public"."project_type" add constraint "project_type_created_by_id_fkey" foreign key (created_by_id) references auth.users(id) not valid;

alter table "public"."project_type" validate constraint "project_type_created_by_id_fkey";

alter table "public"."project_type" add constraint "project_type_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) not valid;

alter table "public"."project_type" validate constraint "project_type_updated_by_id_fkey";

alter table "public"."project_type_work" add constraint "project_type_category_un" unique using index "project_type_category_un";

alter table "public"."project_type_work" add constraint "project_type_work_created_by_id_fkey" foreign key (created_by_id) references auth.users(id) on update cascade on delete set default not valid;

alter table "public"."project_type_work" validate constraint "project_type_work_created_by_id_fkey";

alter table "public"."project_type_work" add constraint "project_type_work_type_id_fkey" foreign key (type_id) references project_type(id) on update cascade on delete cascade not valid;

alter table "public"."project_type_work" validate constraint "project_type_work_type_id_fkey";

alter table "public"."project_type_work" add constraint "project_type_work_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) on update cascade on delete set default not valid;

alter table "public"."project_type_work" validate constraint "project_type_work_updated_by_id_fkey";

alter table "public"."project_type_work" add constraint "project_type_work_work_id_fkey" foreign key (work_id) references project_work(id) on update cascade on delete cascade not valid;

alter table "public"."project_type_work" validate constraint "project_type_work_work_id_fkey";

alter table "public"."project_work" add constraint "project_type_un" unique using index "project_type_un";

alter table "public"."project_work" add constraint "project_work_created_by_id_fkey" foreign key (created_by_id) references auth.users(id) not valid;

alter table "public"."project_work" validate constraint "project_work_created_by_id_fkey";

alter table "public"."project_work" add constraint "project_work_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) not valid;

alter table "public"."project_work" validate constraint "project_work_updated_by_id_fkey";

alter table "public"."projects" add constraint "projects_banner_id_fkey" foreign key (banner_id) references projects_images(id) on update cascade on delete set null not valid;

alter table "public"."projects" validate constraint "projects_banner_id_fkey";

alter table "public"."projects" add constraint "projects_created_by_id_fkey" foreign key (created_by_id) references users(id) not valid;

alter table "public"."projects" validate constraint "projects_created_by_id_fkey";

alter table "public"."projects" add constraint "projects_implantation_mode_id_fkey" foreign key (implantation_mode_id) references project_implantation_mode(id) not valid;

alter table "public"."projects" validate constraint "projects_implantation_mode_id_fkey";

alter table "public"."projects" add constraint "projects_site_ownership_id_fkey" foreign key (site_ownership_id) references project_site_ownership(id) not valid;

alter table "public"."projects" validate constraint "projects_site_ownership_id_fkey";

alter table "public"."projects" add constraint "projects_site_usage_category_id_fkey" foreign key (site_usage_category_id) references project_site_usage_category(id) not valid;

alter table "public"."projects" validate constraint "projects_site_usage_category_id_fkey";

alter table "public"."projects" add constraint "projects_site_usage_id_fkey" foreign key (site_usage_id) references project_site_usage(id) not valid;

alter table "public"."projects" validate constraint "projects_site_usage_id_fkey";

alter table "public"."projects" add constraint "projects_type_id_fkey" foreign key (type_id) references project_type(id) not valid;

alter table "public"."projects" validate constraint "projects_type_id_fkey";

alter table "public"."projects" add constraint "projects_updated_by_id_fkey" foreign key (updated_by_id) references users(id) not valid;

alter table "public"."projects" validate constraint "projects_updated_by_id_fkey";

alter table "public"."projects_images" add constraint "projects_images_created_by_id_fkey" foreign key (created_by_id) references users(id) on update cascade on delete set default not valid;

alter table "public"."projects_images" validate constraint "projects_images_created_by_id_fkey";

alter table "public"."projects_images" add constraint "projects_images_id_fkey" foreign key (id) references storage.objects(id) on update cascade on delete cascade not valid;

alter table "public"."projects_images" validate constraint "projects_images_id_fkey";

alter table "public"."projects_images" add constraint "projects_images_order_un" unique using index "projects_images_order_un" deferrable initially deferred;

alter table "public"."projects_images" add constraint "projects_images_project_id_fkey" foreign key (project_id) references projects(id) on update cascade on delete cascade not valid;

alter table "public"."projects_images" validate constraint "projects_images_project_id_fkey";

alter table "public"."projects_images" add constraint "projects_images_updated_by_id_fkey" foreign key (updated_by_id) references users(id) on update cascade on delete set default not valid;

alter table "public"."projects_images" validate constraint "projects_images_updated_by_id_fkey";

alter table "public"."projects_location" add constraint "projects_location_created_by_id_fkey" foreign key (created_by_id) references users(id) on update cascade on delete set default not valid;

alter table "public"."projects_location" validate constraint "projects_location_created_by_id_fkey";

alter table "public"."projects_location" add constraint "projects_location_project_id_fkey" foreign key (project_id) references projects(id) on update cascade on delete cascade not valid;

alter table "public"."projects_location" validate constraint "projects_location_project_id_fkey";

alter table "public"."projects_location" add constraint "projects_location_updated_by_id_fkey" foreign key (updated_by_id) references users(id) on update set default on delete set default not valid;

alter table "public"."projects_location" validate constraint "projects_location_updated_by_id_fkey";

alter table "public"."projects_publication_status" add constraint "projects_publication_status_project_id_fkey" foreign key (project_id) references projects(id) on update cascade on delete cascade not valid;

alter table "public"."projects_publication_status" validate constraint "projects_publication_status_project_id_fkey";

alter table "public"."projects_publication_status" add constraint "projects_publication_status_updated_by_id_fkey" foreign key (updated_by_id) references users(id) on update cascade on delete set default not valid;

alter table "public"."projects_publication_status" validate constraint "projects_publication_status_updated_by_id_fkey";

alter table "public"."projects_secondary_usages" add constraint "projects_secondary_usages_category_id_fkey" foreign key (category_id) references project_site_usage_category(id) on update cascade on delete cascade not valid;

alter table "public"."projects_secondary_usages" validate constraint "projects_secondary_usages_category_id_fkey";

alter table "public"."projects_secondary_usages" add constraint "projects_secondary_usages_created_by_id_fkey" foreign key (created_by_id) references users(id) on update cascade on delete set default not valid;

alter table "public"."projects_secondary_usages" validate constraint "projects_secondary_usages_created_by_id_fkey";

alter table "public"."projects_secondary_usages" add constraint "projects_secondary_usages_project_id_fkey" foreign key (project_id) references projects(id) on update cascade on delete cascade not valid;

alter table "public"."projects_secondary_usages" validate constraint "projects_secondary_usages_project_id_fkey";

alter table "public"."projects_secondary_usages" add constraint "projects_secondary_usages_updated_by_id_fkey" foreign key (updated_by_id) references users(id) on update cascade on delete set default not valid;

alter table "public"."projects_secondary_usages" validate constraint "projects_secondary_usages_updated_by_id_fkey";

alter table "public"."projects_secondary_usages" add constraint "projects_secondary_usages_usage_id_fkey" foreign key (usage_id) references project_site_usage(id) on update cascade on delete cascade not valid;

alter table "public"."projects_secondary_usages" validate constraint "projects_secondary_usages_usage_id_fkey";

alter table "public"."projects_users" add constraint "projects_users_created_by_id_fkey" foreign key (created_by_id) references users(id) on update cascade on delete set default not valid;

alter table "public"."projects_users" validate constraint "projects_users_created_by_id_fkey";

alter table "public"."projects_users" add constraint "projects_users_project_id_fkey" foreign key (project_id) references projects(id) on update cascade on delete cascade not valid;

alter table "public"."projects_users" validate constraint "projects_users_project_id_fkey";

alter table "public"."projects_users" add constraint "projects_users_updated_by_id_fkey" foreign key (updated_by_id) references users(id) not valid;

alter table "public"."projects_users" validate constraint "projects_users_updated_by_id_fkey";

alter table "public"."projects_users" add constraint "projects_users_user_id_fkey" foreign key (user_id) references users(id) on update cascade on delete cascade not valid;

alter table "public"."projects_users" validate constraint "projects_users_user_id_fkey";

alter table "public"."projects_works" add constraint "projects_works_created_by_id_fkey" foreign key (created_by_id) references users(id) on update cascade on delete set default not valid;

alter table "public"."projects_works" validate constraint "projects_works_created_by_id_fkey";

alter table "public"."projects_works" add constraint "projects_works_project_id_fkey" foreign key (project_id) references projects(id) on update cascade on delete cascade not valid;

alter table "public"."projects_works" validate constraint "projects_works_project_id_fkey";

alter table "public"."projects_works" add constraint "projects_works_un" unique using index "projects_works_un";

alter table "public"."projects_works" add constraint "projects_works_updated_by_id_fkey" foreign key (updated_by_id) references users(id) on update cascade on delete set default not valid;

alter table "public"."projects_works" validate constraint "projects_works_updated_by_id_fkey";

alter table "public"."projects_works" add constraint "projects_works_work_id_fkey" foreign key (work_id) references project_work(id) on update cascade on delete cascade not valid;

alter table "public"."projects_works" validate constraint "projects_works_work_id_fkey";

alter table "public"."role_details" add constraint "app_role_details_label_key" unique using index "app_role_details_label_key";

alter table "public"."role_permissions" add constraint "role_permissions_un" unique using index "role_permissions_un";

alter table "public"."users" add constraint "users_first_name_check" check ((char_length((first_name)::text) >= 1)) not valid;

alter table "public"."users" validate constraint "users_first_name_check";

alter table "public"."users" add constraint "users_id_fkey" foreign key (id) references auth.users(id) on update cascade on delete cascade not valid;

alter table "public"."users" validate constraint "users_id_fkey";

alter table "public"."users" add constraint "users_un" unique using index "users_un";

alter table "public"."users" add constraint "users_updated_by_id_fkey" foreign key (updated_by_id) references auth.users(id) on update cascade on delete set null not valid;

alter table "public"."users" validate constraint "users_updated_by_id_fkey";

alter table "public"."users_notifications" add constraint "users_notifications_notification_id_fkey" foreign key (notification_id) references notifications(id) not valid;

alter table "public"."users_notifications" validate constraint "users_notifications_notification_id_fkey";

alter table "public"."users_notifications" add constraint "users_notifications_user_id_fkey" foreign key (user_id) references auth.users(id) not valid;

alter table "public"."users_notifications" validate constraint "users_notifications_user_id_fkey";

alter table "public"."users_projects_collections" add constraint "users_projects_collections_created_by_id_fkey" foreign key (created_by_id) references users(id) not valid;

alter table "public"."users_projects_collections" validate constraint "users_projects_collections_created_by_id_fkey";

alter table "public"."users_projects_collections" add constraint "users_projects_collections_updated_by_id_fkey" foreign key (updated_by_id) references users(id) not valid;

alter table "public"."users_projects_collections" validate constraint "users_projects_collections_updated_by_id_fkey";

alter table "public"."users_projects_likes" add constraint "users_projects_likes_project_id_fkey" foreign key (project_id) references projects(id) not valid;

alter table "public"."users_projects_likes" validate constraint "users_projects_likes_project_id_fkey";

alter table "public"."users_projects_likes" add constraint "users_projects_likes_un" unique using index "users_projects_likes_un";

alter table "public"."users_projects_likes" add constraint "users_projects_likes_user_id_fkey" foreign key (user_id) references users(id) not valid;

alter table "public"."users_projects_likes" validate constraint "users_projects_likes_user_id_fkey";

alter table "public"."users_projects_queries" add constraint "users_projects_queries_created_by_id_fkey" foreign key (created_by_id) references users(id) not valid;

alter table "public"."users_projects_queries" validate constraint "users_projects_queries_created_by_id_fkey";

alter table "public"."users_projects_queries" add constraint "users_projects_queries_updated_by_id_fkey" foreign key (updated_by_id) references users(id) not valid;

alter table "public"."users_projects_queries" validate constraint "users_projects_queries_updated_by_id_fkey";

alter table "public"."users_roles" add constraint "users_roles_un" unique using index "users_roles_un";

alter table "public"."users_roles" add constraint "users_roles_updated_by_id_fkey" foreign key (updated_by_id) references users(id) not valid;

alter table "public"."users_roles" validate constraint "users_roles_updated_by_id_fkey";

alter table "public"."users_roles" add constraint "users_roles_user_id_fkey" foreign key (user_id) references users(id) not valid;

alter table "public"."users_roles" validate constraint "users_roles_user_id_fkey";

set check_function_bodies = off;

create or replace function public.add_project_gallery_image()
 returns trigger
 language plpgsql
as $function$
	begin
	if (new.bucket_id = 'projects') and ((storage.foldername(new.name))[2] = 'gallery')
	then
		insert into public.projects_images (id, project_id, name, updated_by_id, created_by_id)
        values (new.id, (storage.foldername(new.name))[1]::uuid, new.name, auth.uid(), auth.uid());
		/*insert into public.projects_images as g (name, project_id, updated_by_id, created_by_id, file_names)
        values ((storage.foldername(new.name))[3]::text, (storage.foldername(new.name))[1]::uuid, auth.uid(), auth.uid(), array[new.name])
        on conflict (name) do update set
        file_names = array_append(g.file_names, new.name);*/
end if;

return new;
end;

$function$
;

create or replace function public.authorize(variadic allowed_permissions app_permission[])
 returns boolean
 language plpgsql
 security definer
as $function$
declare
  bind_permissions int;
begin
  select count(*)
  from public.role_permissions
  inner join public.users_roles on role_permissions.role = users_roles.role
  where role_permissions.permission = any (allowed_permissions)
    and users_roles.user_id = auth.uid()
  into bind_permissions;
  
  return bind_permissions > 0;
end;
$function$
;

create or replace function public.authorize(requested_permission app_permission)
 returns boolean
 language plpgsql
 security definer
as $function$
declare
  bind_permissions int;
begin
  select count(*)
  from public.role_permissions
  inner join public.users_roles on role_permissions.role = users_roles.role
  where role_permissions.permission = authorize.requested_permission
    and users_roles.user_id = auth.uid()
  into bind_permissions;
  
  return bind_permissions > 0;
end;
$function$
;

create or replace function public.cascade_delete_project_storage()
 returns trigger
 language plpgsql
as $function$
begin

	delete from storage.objects as o
	where (storage.foldername(o.name))[1]::uuid = old.id;

	return old;

end;

$function$
;

create or replace function public.check_enforce_nplex_user()
 returns trigger
 language plpgsql
 security definer
as $function$
begin

    if (
    	(old.role = 'nplex'::public.app_role)
		and (
			(tg_op = 'update')
			or (
				(tg_op = 'delete')
				and (new.role != 'nplex'::public.app_role)
			)
		)
	)
	or (
		(tg_op = 'update')
		and (new.role = 'nplex'::public.app_role)
		and exists (
			select 1 from public.users_roles
			where (role = 'nplex'::public.app_role) and (user_id != new.user_id)
    	)
	)
	then
    	raise exception 'there must always be one and only one "nplex" user. user % cannot be deleted/updated and cannot have its role unset.', old.user_id;
    	return null;
    else
    	return new;
	end if;

end;

$function$
;

create or replace function public.delete_project_storage()
 returns trigger
 language plpgsql
as $function$
	begin
		/* to do: cascade delete a project's storage objects. might require http extension?. */
		return old;
	end;
$function$
;

create or replace function public.get_project_descriptors()
 returns json
 language plpgsql
 security definer
as $function$
begin
    return (
        select json_build_object(
            'types', (
                select json_agg(row_to_json(t))
				from (
					select pt.*, array_agg(pw) as works
					from public.project_type pt
					left join (
						select tw.type_id, w.*
						from public.project_type_work tw
						left join public.project_work w
						on tw.work_id = w.id
					) pw 
					on pw.type_id = pt.id
					group by pt.id
				) t
            ),
            'works', (
                select json_agg(row_to_json(ttw))
                from (
                    select w.*, array_agg(tw.type_id) as types_ids
                    from public.project_work w
                    left join public.project_type_work tw
                    on tw.work_id = w.id
                    group by w.id
                    order by w.title asc
                ) ttw
            ),
            'siteownerships', (
                select json_agg(row_to_json(so))
                from (
                	select *
                	from public.project_site_ownership
               		order by title asc
               	) so
            ),
            'siteusagescategories', (
                select json_agg(row_to_json(suc))
                from (
                	select *
                	from public.project_site_usage_category
                	order by title asc
                ) suc
            ),
            'siteusages', (
                select json_agg(row_to_json(susupc))
                from (
                    select su.*, array_agg(supc.category_id) as category_ids
                    from public.project_site_usage su
                    left join public.project_site_usage_site_usage_category supc
                    on supc.usage_id = su.id
                    group by su.id
                    order by su.title asc
                ) susupc
            ),
            'implantationmodes', (
                select json_agg(row_to_json(im))
                from (
                	select *
                	from public.project_implantation_mode
                	order by title asc
                ) im
            ),
            'materialorigins', (
                select json_agg(row_to_json(mo))
                from (
                	select *
                	from public.project_material_origin
                	order by title asc
                ) mo
            ),
            'materialtypes', (
                select json_agg(row_to_json(mt))
                from (
                	select *
                	from public.project_material_type
                	order by title asc
                ) mt
            ),
            'materialuses', (
                select json_agg(row_to_json(mu))
                from (
                	select *
                	from public.project_material_use
                	order by title asc
                ) mu
            ),
            'eventtypes', (
                select json_agg(row_to_json(etetst))
                from (
                    select et.*, array_agg(etst.subevent_type_id) as subevent_type_ids
                    from public.project_event_type et
                    left join public.project_event_type_subevent_type etst
                    on etst.event_type_id = et.id
                    group by et.id
                    order by et.title asc
                ) etetst
            ),
            'exemplarityindicatorscategories', (
                select json_agg(row_to_json(eicei))
                from (
                    select eic.*, array_agg(ei.*) as exemplarity_indicator_ids
                    from public.project_exemplarity_indicator_category eic
                    full join (
                    	select *
                    	from public.project_exemplarity_indicator
                    	order by title asc
                    ) ei
                    on ei.indicator_category_id = eic.id
                    group by eic.id
                    order by eic.title asc
                ) eicei
            ),
            'exemplarityindicators', (
                select json_agg(row_to_json(ei))
                from (
                	select *
                	from public.project_exemplarity_indicator
                	order by title asc
                ) ei
            )
        )
    );
end;
$function$
;

create or replace function public.handle_new_project()
 returns trigger
 language plpgsql
 security definer
as $function$
begin

    insert into public.projects_publication_status (project_id)
    values (new.id);
   	insert into public.projects_location (project_id)
   	values (new.id);

    return new;

end;
$function$
;

create or replace function public.handle_new_user()
 returns trigger
 language plpgsql
 security definer
as $function$
begin

    if not exists (
        select 1 from public.users_roles as ur
        where ur.role = 'nplex'::public.app_role
    ) then
        -- percolate auth signup to users and users_roles, while making sure the first user registered is 'nplex'
        -- with role 'nplex' to handle author right relegation on further user profile deletions.
        insert into public.users (id, first_name, updated_by_id)
        values (new.id, 'nplex'::text, new.id);
        insert into public.users_roles (user_id, role, updated_by_id)
        values (new.id, 'nplex'::public.app_role, new.id);
        -- raise notice 'the created user with id % was attributed the "nplex" lead role to fullfill required profile', new.id;
    elseif char_length(coalesce(new.raw_user_meta_data->>'first_name', '')) = 0 then
    	raise exception 'first name is required';
    else
        insert into public.users (id, first_name, last_name, updated_by_id)
        values (new.id, coalesce(new.raw_user_meta_data->>'first_name', null), coalesce(new.raw_user_meta_data->>'last_name', null), new.id);
        insert into public.users_roles (user_id, updated_by_id)
        values (new.id, new.id);
    end if;

    return new;

end;
$function$
;

create or replace function public.project_is_public(p_id uuid)
 returns boolean
 language plpgsql
as $function$
	begin
		return exists (
			select 1 from projects_publication_status as pps
  			where pps.project_id = p_id
  			and pps.status = 'published'::publication_status
  		);
	end;
$function$
;

create or replace function public.track_update()
 returns trigger
 language plpgsql
 security definer
as $function$
declare
	pre jsonb := to_jsonb(old);
	post jsonb := to_jsonb(new);
	column_names text[] := tg_argv[0]::text[];
begin
    if (post ? 'updated_at')
    and (post ? 'updated_by_id')
	and exists(
	    select 1
	    from jsonb_each(pre) as pre_each, jsonb_each(post) as post_each
	    where pre_each.key = post_each.key and pre_each.value is distinct from post_each.value
	    and pre_each.key = any(column_names)
    ) then
        new.updated_at = now();
       	new.updated_by_id = default_uid();
    end if;
	return new;   
end;
$function$
;

create or replace function public.user_can_edit_project(p_id uuid)
 returns boolean
 language plpgsql
 security definer
as $function$
	begin
		if public.authorize('project_update') then return true;
		elseif exists (
			select 1 from public.projects as p
			where p.id = p_id
			and p.created_by_id = auth.uid()
		) then return true;
		else return exists (
			select 1 from public.projects_users as pu
			where pu.project_id = p_id
			and pu.user_id = auth.uid()
		);
		end if;
	end;
$function$
;

create or replace function public.user_can_edit_project(p_row projects)
 returns boolean
 language plpgsql
 security definer
as $function$
	begin
		if public.authorize('project_update') then return true;
		elseif p_row.created_by_id = auth.uid() then return true;
		else return exists (
			select 1 from public.projects_users as pu
			where pu.project_id = p_row.id
			and pu.user_id = auth.uid()
		);
		end if;
	end;
$function$
;

create or replace function public.user_has_role(variadic roles app_role[])
 returns boolean
 language plpgsql
 security definer
as $function$
begin

    if auth.uid() = null then return false;

    else return exists (
        select 1
        from public.users_roles as pur
        where pur.user_id = auth.uid()
            and pur.role = any (roles)
    );

    end if;

end;
$function$
;

create or replace function public.user_has_role(role app_role)
 returns boolean
 language plpgsql
 security definer
as $function$
#variable_conflict use_variable
begin

    if auth.uid() = null then return false;

    else return exists (
        select 1
        from public.users_roles as pur
        where pur.user_id = auth.uid()
            and pur.role = role
    );

    end if;

end;
$function$
;

create or replace view "public"."editable_projects" as  select p.id,
    p.created_at,
    p.updated_at,
    p.created_by_id,
    p.updated_by_id,
    p.title,
    p.description,
    p.site_ownership_id,
    p.site_usage_category_id,
    p.site_usage_id,
    p.site_area,
    p.area,
    p.adjacent_streets,
    p.building_area,
    p.implantation_mode_id,
    p.building_construction_year,
    p.type_id,
    p.banner_id,
    p.cost_range,
    p.likes_sum
   from projects p
  where user_can_edit_project(p.id);


create policy "anyone can select notifications attributed to them"
on "public"."notifications"
as permissive
for select
to public
using ((exists ( select 1
   from users_notifications un
  where (un.notification_id = notifications.id))));


create policy "only admins can insert notifications"
on "public"."notifications"
as permissive
for insert
to public
with check (user_has_role(variadic array['admin'::app_role]));


create policy "only creators or admins can delete"
on "public"."notifications"
as permissive
for delete
to public
using ((user_has_role(variadic array['admin'::app_role]) or (created_by_id = auth.uid())));


create policy "only creators or admins can update"
on "public"."notifications"
as permissive
for update
to public
using ((user_has_role(variadic array['admin'::app_role]) or (created_by_id = auth.uid())))
with check ((user_has_role(variadic array['admin'::app_role]) or (created_by_id = auth.uid())));


create policy "anyone can select"
on "public"."project_event_type"
as permissive
for select
to public
using (true);


create policy "anyone can select"
on "public"."project_event_type_subevent_type"
as permissive
for select
to public
using (true);


create policy "anyone can select"
on "public"."project_exemplarity_indicator"
as permissive
for select
to public
using (true);


create policy "anyone can select"
on "public"."project_exemplarity_indicator_category"
as permissive
for select
to public
using (true);


create policy "anyone can select"
on "public"."project_implantation_mode"
as permissive
for select
to public
using (true);


create policy "anyone can select"
on "public"."project_material_origin"
as permissive
for select
to public
using (true);


create policy "anyone can select"
on "public"."project_material_type"
as permissive
for select
to public
using (true);


create policy "anyone can select"
on "public"."project_material_use"
as permissive
for select
to public
using (true);


create policy "anyone can select"
on "public"."project_site_ownership"
as permissive
for select
to public
using (true);


create policy "anyone can select"
on "public"."project_site_usage"
as permissive
for select
to public
using (true);


create policy "anyone can select"
on "public"."project_site_usage_category"
as permissive
for select
to public
using (true);


create policy "anyone can select"
on "public"."project_site_usage_site_usage_category"
as permissive
for select
to public
using (true);


create policy "anyone can select"
on "public"."project_type"
as permissive
for select
to public
using (true);


create policy "anyone can select"
on "public"."project_type_work"
as permissive
for select
to public
using (true);


create policy "editors and admins can do anything"
on "public"."project_type_work"
as permissive
for all
to public
using (user_has_role(variadic array['editor'::app_role, 'admin'::app_role]))
with check (user_has_role(variadic array['editor'::app_role, 'admin'::app_role]));


create policy "anyone can select"
on "public"."project_work"
as permissive
for select
to public
using (true);


create policy "editors and admin can manage global project works"
on "public"."project_work"
as permissive
for all
to public
using (user_has_role(variadic array['editor'::app_role, 'admin'::app_role]))
with check (user_has_role(variadic array['editor'::app_role, 'admin'::app_role]));


create policy "anyone can select public projects"
on "public"."projects"
as permissive
for select
to public
using (project_is_public(id));


create policy "creators and collaborators can select regardless of pub status"
on "public"."projects"
as permissive
for select
to public
using (user_can_edit_project(projects.*));


create policy "only admins or project creators can delete projects"
on "public"."projects"
as permissive
for delete
to public
using ((user_has_role('admin'::app_role) or (auth.uid() = created_by_id)));


create policy "only authed users can create projects"
on "public"."projects"
as permissive
for insert
to authenticated
with check ((auth.uid() = created_by_id));


create policy "only creators or collaborators can update projects"
on "public"."projects"
as permissive
for update
to public
using (user_can_edit_project(projects.*))
with check (user_can_edit_project(projects.*));


create policy "anyone can select events of public projects"
on "public"."projects_events"
as permissive
for select
to public
using (project_is_public(project_id));


create policy "project creators or collaborators can manage respective project"
on "public"."projects_events"
as permissive
for all
to public
using (user_can_edit_project(project_id))
with check (user_can_edit_project(project_id));


create policy "any project manager can manage respective project indicators"
on "public"."projects_exemplarity_indicators"
as permissive
for all
to public
using (user_can_edit_project(project_id));


create policy "anyone can select indicators of public projects"
on "public"."projects_exemplarity_indicators"
as permissive
for select
to public
using (project_is_public(project_id));


create policy "anyone can see galleries for published projects"
on "public"."projects_images"
as permissive
for select
to public
using (project_is_public(project_id));


create policy "project creators and collaborators can manage galleries"
on "public"."projects_images"
as permissive
for all
to authenticated
using (user_can_edit_project(project_id))
with check (user_can_edit_project(project_id));


create policy "anyone can select locations of public projects"
on "public"."projects_location"
as permissive
for select
to public
using (project_is_public(project_id));


create policy "can only update location if can update project"
on "public"."projects_location"
as permissive
for update
to public
using (user_can_edit_project(project_id))
with check (user_can_edit_project(project_id));


create policy "project editors can select location regardless of publication s"
on "public"."projects_location"
as permissive
for select
to public
using (user_can_edit_project(project_id));


create policy "admins can manage any publication status"
on "public"."projects_publication_status"
as permissive
for update
to public
using (user_has_role('admin'::app_role))
with check (user_has_role('admin'::app_role));


create policy "anyone can select project status"
on "public"."projects_publication_status"
as permissive
for select
to public
using (true);


create policy "editors can manage publication status for theirs or collaborate"
on "public"."projects_publication_status"
as permissive
for update
to public
using ((user_has_role('editor'::app_role) and user_can_edit_project(project_id)))
with check ((user_has_role('editor'::app_role) and user_can_edit_project(project_id)));


create policy "anyone can see secondary usages of public projects"
on "public"."projects_secondary_usages"
as permissive
for select
to public
using (project_is_public(project_id));


create policy "only creators or collaborators can edit secondary usages"
on "public"."projects_secondary_usages"
as permissive
for all
to public
using (user_can_edit_project(project_id))
with check (user_can_edit_project(project_id));


create policy "anyone can see role details"
on "public"."role_details"
as permissive
for select
to public
using (true);


create policy "only admins can update"
on "public"."role_details"
as permissive
for update
to public
using (user_has_role('admin'::app_role))
with check (user_has_role('admin'::app_role));


create policy "anyone can select profiles"
on "public"."users"
as permissive
for select
to public
using (true);


create policy "users can update own profile"
on "public"."users"
as permissive
for update
to public
using ((auth.uid() = id))
with check ((auth.uid() = id));


create policy "users can delete own notifications"
on "public"."users_notifications"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "users can only select notifications attached to them"
on "public"."users_notifications"
as permissive
for select
to public
using ((user_id = auth.uid()));


create policy "anyone can select roles"
on "public"."users_roles"
as permissive
for select
to public
using (true);


create policy "only admin users can update roles"
on "public"."users_roles"
as permissive
for update
to public
using (user_has_role(variadic array['admin'::app_role]))
with check (user_has_role(variadic array['admin'::app_role]));


create policy "creators and collaborators can manage storage for projects they"
on "storage"."objects"
as permissive
for all
to public
using (user_can_edit_project(((storage.foldername(name))[1])::uuid))
with check (user_can_edit_project(((storage.foldername(name))[1])::uuid));


create trigger cascade_delete_storage before delete on public.projects for each row execute function delete_project_storage();

create trigger on_new_project after insert on public.projects for each row execute function handle_new_project();

create trigger on_app_role_delete before delete on public.users_roles for each row execute function check_enforce_nplex_user();

create trigger on_app_role_update before update on public.users_roles for each row execute function check_enforce_nplex_user();

create trigger on_project_image_upload after insert on storage.objects for each row execute function add_project_gallery_image();

create trigger on_new_user after insert on auth.users for each row execute function handle_new_user();
