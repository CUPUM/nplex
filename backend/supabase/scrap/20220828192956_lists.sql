-- 
-- CONTROLLED / STATIC LISTS
-- 


CREATE TABLE IF NOT EXISTS public.project_category (
    id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT project_type_pkey PRIMARY KEY (id)
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.project_category
    OWNER to postgres;
ALTER TABLE IF EXISTS public.project_category
    ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.project_category TO anon;
GRANT ALL ON TABLE public.project_category TO authenticated;
GRANT ALL ON TABLE public.project_category TO postgres;
GRANT ALL ON TABLE public.project_category TO service_role;
CREATE POLICY "Anyone can select project type"
    ON public.project_category
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);


CREATE TABLE IF NOT EXISTS public.project_type (
    id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by_id uuid NOT NULL DEFAULT default_uid(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_by_id uuid NOT NULL DEFAULT default_uid(),
    CONSTRAINT project_sub_type_pkey PRIMARY KEY (id),
    CONSTRAINT project_sub_type_title_key UNIQUE (title)
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.project_type
    OWNER to postgres;
ALTER TABLE IF EXISTS public.project_type
    ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.project_type TO anon;
GRANT ALL ON TABLE public.project_type TO authenticated;
GRANT ALL ON TABLE public.project_type TO postgres;
GRANT ALL ON TABLE public.project_type TO service_role;
CREATE POLICY "Enable read access for all users"
    ON public.project_type
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);


CREATE TABLE IF NOT EXISTS public.project_type_parent_category (
    category_id smallint NOT NULL,
    type_id smallint NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by_id uuid NOT NULL DEFAULT default_uid(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_by_id uuid NOT NULL DEFAULT default_uid(),
    CONSTRAINT project_sub_type_parent_type_pkey PRIMARY KEY (category_id, type_id),
    CONSTRAINT project_sub_type_parent_type_type_id_sub_type_id_key UNIQUE (category_id, type_id),
    CONSTRAINT project_types_sub_types_type_id_sub_type_id_key UNIQUE (category_id, type_id),
    CONSTRAINT project_type_parent_category_category_id_fkey FOREIGN KEY (category_id)
        REFERENCES public.project_category (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT project_type_parent_category_type_id_fkey FOREIGN KEY (type_id)
        REFERENCES public.project_type (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.project_type_parent_category
    OWNER to postgres;
ALTER TABLE IF EXISTS public.project_type_parent_category
    ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.project_type_parent_category TO authenticated;
GRANT ALL ON TABLE public.project_type_parent_category TO anon;
GRANT ALL ON TABLE public.project_type_parent_category TO service_role;
GRANT ALL ON TABLE public.project_type_parent_category TO postgres;
CREATE POLICY "Enable read access for all users"
    ON public.project_type_parent_category
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);


CREATE TABLE IF NOT EXISTS public.project_site_ownership (
    id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT project_site_ownership_pkey PRIMARY KEY (id)
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.project_site_ownership
    OWNER to postgres;
ALTER TABLE IF EXISTS public.project_site_ownership
    ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.project_site_ownership TO anon;
GRANT ALL ON TABLE public.project_site_ownership TO authenticated;
GRANT ALL ON TABLE public.project_site_ownership TO postgres;
GRANT ALL ON TABLE public.project_site_ownership TO service_role;
CREATE POLICY "Anyone can select project site ownership"
    ON public.project_site_ownership
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);


CREATE TABLE IF NOT EXISTS public.project_site_usage_category (
    id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT project_site_usage_category_pkey PRIMARY KEY (id)
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.project_site_usage_category
    OWNER to postgres;
ALTER TABLE IF EXISTS public.project_site_usage_category
    ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.project_site_usage_category TO anon;
GRANT ALL ON TABLE public.project_site_usage_category TO authenticated;
GRANT ALL ON TABLE public.project_site_usage_category TO postgres;
GRANT ALL ON TABLE public.project_site_usage_category TO service_role;
CREATE POLICY "Anyone can select project site usage category"
    ON public.project_site_usage_category
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);


CREATE TABLE IF NOT EXISTS public.project_site_usage (
    id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    is_building boolean NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by_id uuid NOT NULL DEFAULT default_uid(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_by_id uuid NOT NULL DEFAULT default_uid(),
    CONSTRAINT project_site_usage_pkey PRIMARY KEY (id)
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.project_site_usage
    OWNER to postgres;
ALTER TABLE IF EXISTS public.project_site_usage
    ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.project_site_usage TO anon;
GRANT ALL ON TABLE public.project_site_usage TO authenticated;
GRANT ALL ON TABLE public.project_site_usage TO postgres;
GRANT ALL ON TABLE public.project_site_usage TO service_role;
CREATE POLICY "Anyone can select project site usage"
    ON public.project_site_usage
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);


CREATE TABLE IF NOT EXISTS public.project_site_usage_parent_category (
    id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
    usage_id smallint NOT NULL,
    category_id smallint NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by_id uuid NOT NULL DEFAULT default_uid(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_by_id uuid NOT NULL DEFAULT default_uid(),
    CONSTRAINT project_site_usage_by_category_pkey PRIMARY KEY (usage_id, category_id),
    CONSTRAINT project_site_usage_by_category_usage_id_category_id_key UNIQUE (usage_id, category_id),
    CONSTRAINT project_site_usage_parent_category_usage_id_category_id_key UNIQUE (usage_id, category_id),
    CONSTRAINT project_site_usage_parent_category_category_id_fkey FOREIGN KEY (category_id)
        REFERENCES public.project_site_usage_category (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT project_site_usage_parent_category_usage_id_fkey FOREIGN KEY (usage_id)
        REFERENCES public.project_site_usage (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.project_site_usage_parent_category
    OWNER to postgres;
ALTER TABLE IF EXISTS public.project_site_usage_parent_category
    ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.project_site_usage_parent_category TO authenticated;
GRANT ALL ON TABLE public.project_site_usage_parent_category TO anon;
GRANT ALL ON TABLE public.project_site_usage_parent_category TO service_role;
GRANT ALL ON TABLE public.project_site_usage_parent_category TO postgres;
CREATE POLICY "Anyone can select links between usages and categories"
    ON public.project_site_usage_parent_category
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);


CREATE TABLE IF NOT EXISTS public.project_material_type (
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    combustible boolean NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by_id uuid NOT NULL DEFAULT default_uid(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_by_id uuid NOT NULL DEFAULT default_uid(),
    CONSTRAINT project_material_type_pkey PRIMARY KEY (id),
    CONSTRAINT project_material_type_title_key UNIQUE (title),
    CONSTRAINT project_material_type_created_by_id_fkey FOREIGN KEY (created_by_id)
        REFERENCES public.users_profiles (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT project_material_type_updated_by_id_fkey FOREIGN KEY (updated_by_id)
        REFERENCES public.users_profiles (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.project_material_type
    OWNER to postgres;
ALTER TABLE IF EXISTS public.project_material_type
    ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.project_material_type TO authenticated;
GRANT ALL ON TABLE public.project_material_type TO anon;
GRANT ALL ON TABLE public.project_material_type TO service_role;
GRANT ALL ON TABLE public.project_material_type TO postgres;
CREATE POLICY "Enable read access for all users"
    ON public.project_material_type
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);


CREATE TABLE IF NOT EXISTS public.project_material_use (
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by_id uuid NOT NULL DEFAULT default_uid(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_by_id uuid NOT NULL DEFAULT default_uid(),
    CONSTRAINT project_material_use_pkey PRIMARY KEY (id),
    CONSTRAINT project_material_use_title_key UNIQUE (title),
    CONSTRAINT project_material_use_created_by_id_fkey FOREIGN KEY (created_by_id)
        REFERENCES public.users_profiles (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT project_material_use_updated_by_id_fkey FOREIGN KEY (updated_by_id)
        REFERENCES public.users_profiles (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.project_material_use
    OWNER to postgres;
ALTER TABLE IF EXISTS public.project_material_use
    ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.project_material_use TO authenticated;
GRANT ALL ON TABLE public.project_material_use TO anon;
GRANT ALL ON TABLE public.project_material_use TO service_role;
GRANT ALL ON TABLE public.project_material_use TO postgres;
CREATE POLICY "Enable read access for all users"
    ON public.project_material_use
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);


CREATE TABLE IF NOT EXISTS public.project_material_origin (
    id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
    title text COLLATE pg_catalog."default" NOT NULL,
    label text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT project_material_origin_pkey PRIMARY KEY (id),
    CONSTRAINT project_material_origin_label_key UNIQUE (label),
    CONSTRAINT project_material_origin_title_key UNIQUE (title)
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.project_material_origin
    OWNER to postgres;
ALTER TABLE IF EXISTS public.project_material_origin
    ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.project_material_origin TO anon;
GRANT ALL ON TABLE public.project_material_origin TO authenticated;
GRANT ALL ON TABLE public.project_material_origin TO postgres;
GRANT ALL ON TABLE public.project_material_origin TO service_role;
CREATE POLICY "Enable read access for all users"
    ON public.project_material_origin
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);



CREATE TABLE IF NOT EXISTS public.project_implantation_mode (
    id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT project_implantation_mode_pkey PRIMARY KEY (id),
    CONSTRAINT project_implantation_mode_title_key UNIQUE (title)
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.project_implantation_mode
    OWNER to postgres;
ALTER TABLE IF EXISTS public.project_implantation_mode
    ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.project_implantation_mode TO anon;
GRANT ALL ON TABLE public.project_implantation_mode TO authenticated;
GRANT ALL ON TABLE public.project_implantation_mode TO postgres;
GRANT ALL ON TABLE public.project_implantation_mode TO service_role;
CREATE POLICY "Enable read access for all users"
    ON public.project_implantation_mode
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);


CREATE TABLE IF NOT EXISTS public.project_exemplarity_indicator_category (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    created_by_id uuid NOT NULL DEFAULT default_uid(),
    updated_by_id uuid NOT NULL DEFAULT default_uid(),
    CONSTRAINT project_exemplarity_indicator_category_pkey PRIMARY KEY (id),
    CONSTRAINT project_exemplarity_indicator_category_created_by_id_fkey FOREIGN KEY (created_by_id)
        REFERENCES public.users_profiles (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE SET DEFAULT,
    CONSTRAINT project_exemplarity_indicator_category_updated_by_id_fkey FOREIGN KEY (updated_by_id)
        REFERENCES public.users_profiles (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE SET DEFAULT
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.project_exemplarity_indicator_category
    OWNER to postgres;
ALTER TABLE IF EXISTS public.project_exemplarity_indicator_category
    ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.project_exemplarity_indicator_category TO anon;
GRANT ALL ON TABLE public.project_exemplarity_indicator_category TO authenticated;
GRANT ALL ON TABLE public.project_exemplarity_indicator_category TO postgres;
GRANT ALL ON TABLE public.project_exemplarity_indicator_category TO service_role;
CREATE POLICY "Enable read access for all users"
    ON public.project_exemplarity_indicator_category
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);


CREATE TABLE IF NOT EXISTS public.project_exemplarity_indicator (
    id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    category_id bigint,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by_id uuid NOT NULL DEFAULT default_uid(),
    updated_by_id uuid NOT NULL DEFAULT default_uid(),
    CONSTRAINT project_exemplarity_indicator_pkey PRIMARY KEY (id),
    CONSTRAINT project_exemplarity_indicator_category_id_fkey FOREIGN KEY (category_id)
        REFERENCES public.project_exemplarity_indicator_category (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT project_exemplarity_indicator_created_by_id_fkey FOREIGN KEY (created_by_id)
        REFERENCES public.users_profiles (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT project_exemplarity_indicator_updated_by_id_fkey FOREIGN KEY (updated_by_id)
        REFERENCES public.users_profiles (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.project_exemplarity_indicator
    OWNER to postgres;
ALTER TABLE IF EXISTS public.project_exemplarity_indicator
    ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.project_exemplarity_indicator TO authenticated;
GRANT ALL ON TABLE public.project_exemplarity_indicator TO anon;
GRANT ALL ON TABLE public.project_exemplarity_indicator TO service_role;
GRANT ALL ON TABLE public.project_exemplarity_indicator TO postgres;
CREATE POLICY "Enable read access for all users"
    ON public.project_exemplarity_indicator
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);


CREATE TABLE IF NOT EXISTS public.project_event_type (
    id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    durative boolean NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by_id uuid NOT NULL DEFAULT default_uid(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_by_id uuid NOT NULL DEFAULT default_uid(),
    CONSTRAINT project_event_type_pkey PRIMARY KEY (id),
    CONSTRAINT project_event_type_created_by_id_fkey FOREIGN KEY (created_by_id)
        REFERENCES public.users_profiles (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT project_event_type_updated_by_id_fkey FOREIGN KEY (updated_by_id)
        REFERENCES public.users_profiles (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.project_event_type
    OWNER to postgres;
ALTER TABLE IF EXISTS public.project_event_type
    ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.project_event_type TO anon;
GRANT ALL ON TABLE public.project_event_type TO authenticated;
GRANT ALL ON TABLE public.project_event_type TO postgres;
GRANT ALL ON TABLE public.project_event_type TO service_role;
CREATE POLICY "Enable read access for all users"
    ON public.project_event_type
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);


CREATE TABLE IF NOT EXISTS public.project_event_child_type (
    id smallint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 32767 CACHE 1 ),
    type_id smallint NOT NULL,
    child_type_id smallint NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    created_by_id uuid NOT NULL DEFAULT default_uid(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_by_id uuid NOT NULL DEFAULT default_uid(),
    CONSTRAINT project_event_child_type_pkey PRIMARY KEY (type_id, child_type_id),
    CONSTRAINT project_event_child_type_child_type_id_fkey FOREIGN KEY (child_type_id)
        REFERENCES public.project_event_type (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT project_event_child_type_created_by_id_fkey FOREIGN KEY (created_by_id)
        REFERENCES public.users_profiles (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT project_event_child_type_type_id_fkey FOREIGN KEY (type_id)
        REFERENCES public.project_event_type (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT project_event_child_type_updated_by_id_fkey FOREIGN KEY (updated_by_id)
        REFERENCES public.users_profiles (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)
TABLESPACE pg_default;
ALTER TABLE IF EXISTS public.project_event_child_type
    OWNER to postgres;
ALTER TABLE IF EXISTS public.project_event_child_type
    ENABLE ROW LEVEL SECURITY;
GRANT ALL ON TABLE public.project_event_child_type TO authenticated;
GRANT ALL ON TABLE public.project_event_child_type TO anon;
GRANT ALL ON TABLE public.project_event_child_type TO service_role;
GRANT ALL ON TABLE public.project_event_child_type TO postgres;
CREATE POLICY "Enable read access for all users"
    ON public.project_event_child_type
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);