/*
Multiple-choice labeled switch.
*/
.switch {
	--size: var(--base-size);
	--radius: var(--base-radius);
	--inset: var(--base-inset);
	--_base-size: calc(var(--size) - 2 * var(--inset));
	--_base-radius: calc(var(--radius) - var(--inset));
	--_base-padding: calc(var(--base-padding) - var(--inset));
	isolation: isolate;
	position: relative;
	display: inline-flex;
	flex-direction: row;
	padding: var(--inset);
	border-radius: var(--radius);
	height: var(--size);
	flex: none;
	gap: 0;
	align-items: stretch;
	justify-content: stretch;
	transition: all var(--duration-fast) ease-out;

	&:not[data-orientation='vertical'] {
		&.round {
			--radius: var(--radius-full);
		}
	}

	&[data-orientation='vertical'] {
		flex-direction: column;
		height: auto;
		flex: none;
	}

	&:focus-within,
	&:focus-visible {
		outline: var(--focus-ring);
	}

	.switch-input {
		position: absolute;
		width: 0;
		height: 0;
		opacity: 0;
		pointer-events: none;
	}

	.switch-thumb {
		position: absolute;
		inset: 0;
		border-radius: inherit;
		z-index: -1;
		pointer-events: none;
	}

	.switch-item {
		position: relative;
		cursor: pointer;
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: center;
		height: var(--_base-size);
		border-radius: var(--_base-radius);
		padding-inline: var(--_base-padding);
		transform: translate3d(0);
		transition: all var(--duration-fast) ease-out;

		&:hover,
		&:focus-visible {
			opacity: 1;
		}

		&:active {
			animation: var(--animation-press);
		}
	}

	/*
	Default variant
	*/
	&:not(.outlined, .ghost) {
		background-color: color-mix(in srgb, var(--color-neutral-500) 10%, transparent);

		.switch-thumb {
			background-color: var(--color-neutral-50);
			:--dark & {
				background-color: var(--color-neutral-900);
			}
		}

		.switch-item {
			color: color-mix(in srgb, var(--color-neutral-800) 75%, transparent);
			:--dark & {
				color: color-mix(in srgb, var(--color-neutral-200) 75%, transparent);
			}
			&:hover,
			&:focus-visible {
				&:not([data-state='active']) {
					background-color: color-mix(in srgb, var(--color-neutral-500) 20%, transparent);
					color: var(--color-neutral-900);
					:--dark & {
						color: var(--color-neutral-100);
					}
				}
			}

			&[data-state='checked'],
			&[data-state='active'],
			&:has(:checked) {
				pointer-events: none;
				color: var(--color-neutral-900);
				box-shadow: var(--shadow-md);
				:--dark & {
					box-shadow: none;
					color: var(--color-neutral-100);
				}
			}
		}
	}

	&.ghost {
		/* menu {
			--tab-list-padding: 3px;
			--tab-button-radius: var(--radius-full);
			display: flex;
			flex-direction: row;
			justify-content: flex-start;
			font-size: var(--size-xs);
			padding: var(--tab-list-padding);
			border-radius: calc(var(--tab-button-radius) + var(--tab-list-padding));
			background-color: color-mix(in srgb, var(--color-neutral-500) 10%, transparent);
			:global(:--dark) & {
				background-color: color-mix(in srgb, var(--color-neutral-900) 50%, transparent);
			}
		}
	
		button {
			z-index: 0;
			position: relative;
			height: calc(var(--base-size) - 2 * var(--tab-list-padding));
			padding: 0 1em;
			font-weight: 500;
			display: flex;
			flex-direction: row;
			align-items: center;
			border-radius: var(--tab-button-radius);
			color: var(--color-neutral-600);
			background-color: color-mix(in srgb, var(--color-neutral-500) 0%, transparent);
			transition: all var(--duration-fast) ease-out;
			:global(:--dark) & {
				background-color: color-mix(in srgb, var(--color-neutral-500) 0%, transparent);
				color: var(--color-neutral-400);
			}
			&:hover,
			&:focus-visible {
				&:not(&[data-state='active']) {
					color: var(--color-neutral-900);
					background-color: color-mix(in srgb, var(--color-neutral-400) 10%, transparent);
					:global(:--dark) & {
						background-color: color-mix(in srgb, var(--color-neutral-400) 10%, transparent);
						color: var(--color-neutral-100);
					}
				}
			}
			&:focus {
				outline: var(--base-focus-ring);
			}
			&[data-state='active'] {
				cursor: default;
				color: var(--color-neutral-950);
				:global(:--dark) & {
					color: var(--color-neutral-50);
				}
			}
		}
	
		.needle {
			z-index: -1;
			position: absolute;
			inset: 0;
			border-radius: inherit;
			background-color: white;
			:global(:--dark) & {
				background-color: color-mix(in srgb, var(--color-neutral-400) 20%, transparent);
			}
		} */
	}

	/*
	Outlined variant
	*/
	&.outlined {
		border: var(--border);

		&:hover {
			background-color: color-mix(in srgb, var(--color-neutral-400) 20%, transparent);
			:--dark & {
				background-color: color-mix(in srgb, var(--color-neutral-600) 20%, transparent);
			}
		}

		&:focus-visible {
			border-color: transparent;
		}
	}
}
