/*
	Switch

	Aliased states
		- default
		- hover (:hover, :active)
		- disabled (:disabled, [aria-disabled='true'], [data-disabled='true'])
		- checked (:checked, [aria-checked='true'], [data-state='active'], [data-state='checked'], :has(:checked))

	Aliased properties
		- color
		- background
		- background-inset
		- border-color
		- border-style
		- border-width
		- icon-color

	Custom properties pattern
		"--button{-mod}{-aliased_state}-{aliased_property}: value;"

	Variants
		- default
		- bordered
		- dashed
		- ghost

	Compounds
		- danger ([data-danger=true])
	*/

.switch {
	/* Default */

	&:not(.switch-bordered, .switch-dashed, .switch-ghost) {
		--switch-color: var(--text-color-input);
		--switch-background: var(--background-color-input);
		--switch-border-style: none;
		--switch-icon-color: currentColor;
		--switch-hover-color: var(--text-color-base-strong);
		--switch-hover-background: var(--background-color-input-strong);
		--switch-item-background-inset: 0;
		--switch-item-background: ;
		--switch-item-hover-background: ;
		--switch-item-hover-color: ;
		--switch-thumb-background: var(--background-color-input-strong);
	}

	/* Bordered & dashed */

	&:is(.switch-bordered) {
		--switch-border-style: solid;
	}

	&:is(.switch-dashed) {
		--switch-border-style: dashed;
	}

	&:is(.switch-bordered, .switch-dashed) {
		--switch-color: var(--background-color-input-input);
		--switch-background: transparent;
		--switch-border-color: var(--border-color);
		--switch-icon-color: currentColor;
		--switch-background-inset: 0.4em;
		--switch-hover-background: var(--background-color-input-strong);
		--switch-hover-border-color: transparent;
		--switch-hover-background-inset: 0;
	}

	/* Ghost */

	&:is(.switch-ghost) {
		--switch-color: var(--text-color-input-soft);
		--switch-background: transparent;
		--switch-icon-color: currentColor;
		--switch-border-style: none;
		--switch-hover-color: var(--text-color-input);
		--switch-thumb-background: var(--background-color-input-strong);
		--switch-item-background-inset: 0.4em;
		--switch-item-background: transparent;
		--switch-item-hover-background-inset: 0;
		--switch-item-hover-background: var(--background-color-input);
		--switch-item-checked-color: var(--text-color-input-strong);
		--switch-item-checked-background-inset: 0;
		--switch-item-checked-background: var(--background-color-input-strong);
	}

	/* Base */

	--switch-nest: var(--spacing-input-nest);
	--switch-radius: var(--radius-input);
	--nest-spacing-input: calc(var(--spacing-input) - 2 * var(--switch-nest));
	--nest-spacing-input-padding: calc(var(--spacing-input-padding) - var(--switch-nest));
	--nest-radius-input: calc(var(--switch-radius) - var(--switch-nest));
	isolation: isolate;
	position: relative;
	display: inline-flex;
	padding: var(--switch-nest);
	border-radius: var(--switch-radius);
	user-select: none;
	flex: none;
	gap: 0;
	align-items: stretch;
	justify-content: stretch;
	color: var(--switch-color);
	background: var(--switch-background);
	transition: all var(--duration-fast) ease-out;

	&::after {
		content: '';
		pointer-events: none;
		position: absolute;
		border-radius: inherit;
		inset: 0;
		border-width: var(--switch-border-width);
		border-style: var(--switch-border-style);
		border-color: var(--switch-border-color);
		transition: inherit;
	}

	> * {
		--spacing-input: var(--nest-spacing-input);
		--spacing-input-padding: var(--nest-spacing-input-padding);
		--radius-input: var(--nest-radius-input);
	}

	/* Orientation */

	&:not([data-orientation='vertical']) {
		flex-direction: row;
		height: var(--spacing-input);
	}
	&[data-orientation='vertical'] {
		flex-direction: column;
	}

	/* Rounded */

	&:is(.rounded-full) {
		--switch-radius: var(--radius-full);
	}

	/* Hover */

	&:hover {
		color: var(--switch-hover-color), var(--switch-color);
		background: var(--switch-hover-background, var(--switch-background));

		&::after {
			border-width: var(--switch-hover-border-width, var(--switch-border-width));
			border-style: var(--switch-hover-border-style, var(--switch-border-style));
			border-color: var(--switch-hover-border-color, var(--switch-border-color));
		}
	}

	/* Focus */

	&:focus-visible,
	&:focus,
	&:has(:focus) {
		outline: var(--outline-width-focus) solid var(--outline-color);
		color: var(--switch-hover-color), var(--switch-color);
		background: var(--switch-hover-background, var(--switch-background));

		&::after {
			border-width: var(--switch-hover-border-width, var(--switch-border-width));
			border-style: var(--switch-hover-border-style, var(--switch-border-style));
			border-color: var(--switch-hover-border-color, var(--switch-border-color));
		}
	}

	/* Disabled */

	&:disabled,
	&[aria-disabled='true'],
	&[data-disabled='true'] {
		pointer-events: none;
		color: var(--switch-disabled-color);
		background: var(--switch-disabled-background);

		&::after {
			border-width: var(--switch-disabled-border-width, var(--switch-border-width));
			border-style: var(--switch-disabled-border-style, var(--switch-border-style));
			border-color: var(--switch-disabled-border-color, var(--switch-border-color));
		}
	}

	/* Indicator for current switch item */

	.switch-thumb {
		position: absolute;
		z-index: -1;
		inset: 0;
		border-radius: inherit;
		pointer-events: none;
		background: var(--switch-thumb-background);
	}

	/* Switch trigger child */

	.switch-item {
		position: relative;
		cursor: pointer;
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: center;
		height: var(--spacing-input);
		border-radius: var(--radius-input);
		padding-inline: var(--spacing-input-padding);
		transition: all var(--transition-duration-fast) var(--transition-timing-function-out);

		/* Square */

		&.aspect-square {
			padding-inline: 0;

			.lucide-icon,
			.spinner {
				opacity: 1;
				transform: scale(1);
			}
		}

		/* Icon children */

		& .lucide-icon,
		.spinner {
			width: var(--spacing-input-icon);
			height: var(--spacing-input-icon);
			opacity: var(--opacity-soft);
			transform: scale(1);
			flex: none;
			user-select: none;
			pointer-events: none;
			transition:
				opacity var(--transition-duration-medium) ease-out,
				transform var(--transition-duration-fast) var(--transition-timing-function-out);
		}

		/* Base */

		color: var(--switch-item-hover-color);
		background: var(--switch-item-background);

		/* Disabled */

		&:is(:disabled, [aria-disabled='true'], [data-disabled='true']) {
			color: var(--switch-disabled-color, var(--switch-item-color));
			background: var(--switch-disabled-background, var(--switch-item-background));
		}

		/* Checked */

		&:is(:checked, :has(:checked), [data-state='checked'], [data-state='active'], [aria-checked='true'], [aria-selected='true']) {
			color: var(--switch-item-checked-color, var(--switch-item-color));
			background: var(--switch-item-checked-background, var(--switch-item-background));
			animation: var(--animation-press);

			.lucide-icon,
			.spinner {
				opacity: 1;
				transform: scale(1);
			}
		}

		/* Active */

		&:where(:active) {
			color: var(--switch-item-active-color, var(--switch-item-color));
			background: var(--switch-item-active-background, var(--switch-item-background));
		}
	}
}
