// vite.config.ts
import { sveltekit } from "file:///Users/macbookpro/Documents/Dev/nplex/frontend/node_modules/.pnpm/@sveltejs+kit@1.0.1_svelte@3.55.0+vite@4.0.3/node_modules/@sveltejs/kit/src/exports/vite/index.js";

// src/plugins/themes/utils.ts
import { colord } from "file:///Users/macbookpro/Documents/Dev/nplex/frontend/node_modules/.pnpm/colord@2.9.3/node_modules/colord/index.mjs";

// src/lib/utils/object.ts
function isObject(value) {
  return !!value && typeof value === "object" && !Array.isArray(value);
}
function flatten(source) {
  return Object.entries(source).reduce((acc, [k, v]) => {
    if (isObject(v)) {
      return [
        ...acc,
        ...flatten(v).map(([k1, v1]) => {
          return [[k, ...k1], v1];
        })
      ];
    }
    return [...acc, [[k], v]];
  }, []);
}

// src/plugins/themes/utils.ts
function fade(color) {
  const { r, g, b } = colord(color).toRgb();
  return `${r}, ${g}, ${b}`;
}
function vars(object, format) {
  return flatten(object).map(([keys, val]) => {
    const [k, v] = format(keys.join("-"), val);
    return `--${k}: ${v}`;
  }).join("; ");
}
function themeClass(name) {
  return `ui-theme-${name.toLowerCase()}`;
}
var themeClassPattern = new RegExp(/\bui-theme-.+?\b/, "gi");
function themeClasses(themes) {
  const names = Object.keys(themes);
  const classes = names.map((t) => [t, themeClass(t)]);
  return Object.fromEntries(classes);
}
function themeNames(themes) {
  const names = Object.keys(themes);
  return Object.fromEntries(names.map((n) => [n, n]));
}

// src/lib/utils/themes.ts
var THEMES = {
  LIGHT: {
    bg: {
      "000": "hsl(54, 20%, 100%)",
      100: "hsl(55, 20%, 97%)",
      300: "hsl(56, 18%, 94%)",
      500: "hsl(57, 15%, 90%)",
      700: "hsl(59, 12%, 86%)",
      900: "hsl(60, 11%, 81%)"
    },
    fg: {
      "000": "hsl(165, 10%, 0%)",
      100: "hsl(165, 8%, 7%)",
      300: "hsl(165, 6%, 11%)",
      500: "hsl(165, 4%, 15%)",
      700: "hsl(165, 3%, 19%)",
      900: "hsl(165, 2%, 22%)"
    },
    primary: {
      100: "hsl(120, 48%, 72%)",
      300: "hsl(122, 46%, 64%)",
      500: "hsl(124, 44%, 56%)",
      700: "hsl(126, 46%, 45%)",
      900: "hsl(128, 48%, 34%)"
    },
    secondary: {
      100: "hsl(243, 86%, 81%)",
      300: "hsl(244, 83%, 77%)",
      500: "hsl(245, 77%, 72%)",
      700: "hsl(246, 74%, 66%)",
      900: "hsl(247, 66%, 58%)"
    },
    success: {
      100: "hsl(83, 71%, 74%)",
      300: "hsl(83, 72%, 68%)",
      500: "hsl(83, 73%, 60%)",
      700: "hsl(83, 74%, 49%)",
      900: "hsl(83, 80%, 44%)"
    },
    error: {
      100: "hsl(5, 90%, 78%)",
      300: "hsl(5, 85%, 70%)",
      500: "hsl(5, 80%, 62%)",
      700: "hsl(5, 74%, 54%)",
      900: "hsl(5, 70%, 46%)"
    }
  },
  DARK: {
    bg: {
      "000": "hsl(204, 20%, 0%)",
      100: "hsl(203, 19%, 8%)",
      300: "hsl(202,18%, 11%)",
      500: "hsl(201,17%, 13%)",
      700: "hsl(200, 16%, 15%)",
      900: "hsl(199, 14%, 17%)"
    },
    fg: {
      "000": "hsl(140, 9%, 86%)",
      100: "hsl(125, 10%, 90%)",
      300: "hsl(110, 12%, 93%)",
      500: "hsl(95, 16%, 95%)",
      700: "hsl(80, 20%, 97%)",
      900: "hsl(0, 0%, 100%)"
    },
    primary: {
      100: "hsl(138, 65%, 30%)",
      300: "hsl(137, 54%, 39%)",
      500: "hsl(136, 43%, 50%)",
      700: "hsl(136, 44%, 62%)",
      900: "hsl(137, 45%, 72%)"
    },
    secondary: {
      100: "hsl(247, 66%, 58%)",
      300: "hsl(246, 74%, 66%)",
      500: "hsl(245, 77%, 72%)",
      700: "hsl(244, 83%, 77%)",
      900: "hsl(243, 86%, 81%)"
    },
    success: {
      100: "hsl(83, 71%, 74%)",
      300: "hsl(83, 72%, 68%)",
      500: "hsl(83, 73%, 60%)",
      700: "hsl(83, 74%, 49%)",
      900: "hsl(83, 80%, 44%)"
    },
    error: {
      100: "hsl(2, 90%, 78%)",
      300: "hsl(3, 88%, 72%)",
      500: "hsl(3, 84%, 66%)",
      700: "hsl(4, 76%, 59%)",
      900: "hsl(5, 66%, 50%)"
    }
  }
};
var THEME_CLASSES = themeClasses(THEMES);
var THEME_NAMES = themeNames(THEMES);

// src/plugins/icons/index.ts
import { paramCase } from "file:///Users/macbookpro/Documents/Dev/nplex/frontend/node_modules/.pnpm/change-case@4.1.2/node_modules/change-case/dist/index.js";
import toPath from "file:///Users/macbookpro/Documents/Dev/nplex/frontend/node_modules/.pnpm/element-to-path@1.2.1/node_modules/element-to-path/dist/element-to-path.cjs.js";
import { readdirSync, readFileSync as readFileSync2, writeFile } from "fs";
import { extname, parse, resolve as resolve2 } from "path";
import prettier from "file:///Users/macbookpro/Documents/Dev/nplex/frontend/node_modules/.pnpm/prettier@2.8.1/node_modules/prettier/index.js";
import { parse as parseSvg } from "file:///Users/macbookpro/Documents/Dev/nplex/frontend/node_modules/.pnpm/svgson@5.2.1/node_modules/svgson/dist/svgson.cjs.js";

// src/plugins/common.ts
import { readFileSync } from "fs";
import { resolve } from "path";
var PRETTIER_CONFIG = JSON.parse(readFileSync(resolve(".prettierrc")).toString());

// src/plugins/icons/index.ts
var __vite_injected_original_dirname = "/Users/macbookpro/Documents/Dev/nplex/frontend/src/plugins/icons";
var __vite_injected_original_filename = "/Users/macbookpro/Documents/Dev/nplex/frontend/src/plugins/icons/index.ts";
var OUTPUT_FILE = resolve2("src", "lib", "utils", "icons.ts");
var SOURCE_DIR = resolve2(__vite_injected_original_dirname, "assets");
var COMMENT = `/*
* \u26A0\uFE0F WARNING \u26A0\uFE0F
*
* This file was generated by the icons vite-plugin. All changes added manually here will be lost on next iteration run of plugin's generators.
*
* Generated at: ${new Date()}
*
* \u26A0\uFE0F WARNING \u26A0\uFE0F
*/`;
function extractSvgPaths(svg) {
  const paths = [];
  if (["path", "rect", "line", "polyline", "polygon", "circle", "ellipse"].includes(svg.name)) {
    const d = svg.name === "path" ? svg.attributes.d : toPath(svg);
    paths.push({
      d,
      type: svg.attributes.type ?? "primary",
      fill: !!svg.attributes.fill,
      stroke: !!svg.attributes.stroke
    });
  }
  if (svg.children.length) {
    for (const child of svg.children) {
      paths.push(...extractSvgPaths(child));
    }
  }
  return paths;
}
function plugin() {
  async function writeIcons() {
    try {
      const promises = readdirSync(SOURCE_DIR).filter((f) => extname(f).toLocaleLowerCase() === ".svg").map(async (fname) => {
        const svg = await parseSvg(readFileSync2(resolve2(SOURCE_DIR, fname)).toString());
        const name = paramCase(parse(fname).name);
        const { width, height, viewBox } = svg.attributes;
        const paths = extractSvgPaths(svg);
        return {
          name,
          width,
          height,
          viewBox,
          paths
        };
      });
      const parsed = (await Promise.all(promises)).reduce(
        (acc, { name, ...props }) => ({ ...acc, [name]: props }),
        {}
      );
      const statements = [COMMENT, `export const icons = ${JSON.stringify(parsed)}`];
      const formatted = prettier.format(statements.join("\n\n"), {
        parser: "typescript",
        ...PRETTIER_CONFIG
      });
      writeFile(OUTPUT_FILE, formatted, (error) => {
        if (error)
          throw error;
        else
          console.info("Successfully generated new icons from svg assets!");
      });
    } catch (error) {
      console.error("Error generating new icons", error);
    }
  }
  return {
    name: "nplex-icons",
    configureServer(server) {
      async function watch(abspath) {
        const isSvgIcon = abspath.startsWith(SOURCE_DIR) && extname(abspath).toLocaleLowerCase() === ".svg";
        if (isSvgIcon || abspath === __vite_injected_original_filename) {
          writeIcons();
        }
      }
      server.watcher.on("add", watch);
      server.watcher.on("change", watch);
    },
    buildStart: {
      async handler() {
        writeIcons();
      }
    }
  };
}

// src/plugins/themes/index.ts
import { writeFile as writeFile2 } from "fs";
import { resolve as resolve3 } from "path";
import prettier2 from "file:///Users/macbookpro/Documents/Dev/nplex/frontend/node_modules/.pnpm/prettier@2.8.1/node_modules/prettier/index.js";
var OUTPUT_FILE2 = resolve3("src", "lib", "styles", "themes.css");
var COMMENT2 = `/*
* \u26A0\uFE0F WARNING \u26A0\uFE0F
*
* This file was generated by the styles vite-plugin. All changes added manually here will be lost on next iteration run of plugin's generators.
*
* Generated at: ${new Date()}
*
* \u26A0\uFE0F WARNING \u26A0\uFE0F
*/`;
function plugin2(themes) {
  function writeStyles() {
    try {
      const statements = [
        COMMENT2,
        ...Object.entries(themes).map(([t, c]) => {
          return `.${themeClass(t)} {
						${vars(c, (k, v) => ["color-" + k, v])};
						${vars(c, (k, v) => ["rgb-" + k, fade(v + "")])};
					}`;
        })
      ];
      const formatted = prettier2.format(statements.join("\n\n"), {
        parser: "css",
        ...PRETTIER_CONFIG
      });
      writeFile2(OUTPUT_FILE2, formatted, (error) => {
        if (error)
          throw error;
        else
          console.info("Style themes globals generated successfully.");
      });
    } catch (error) {
      console.error("Error generating theme.", error);
    }
  }
  return {
    name: "nplex-themes",
    config() {
      writeStyles();
    },
    buildStart() {
      writeStyles();
    }
  };
}

// vite.config.ts
var config = {
  server: {
    port: process.env.PORT ? +process.env.PORT : 3e3
  },
  plugins: [plugin(), plugin2(THEMES), sveltekit()],
  ssr: {
    noExternal: ["zod-form-data"]
  }
};
var vite_config_default = config;
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
