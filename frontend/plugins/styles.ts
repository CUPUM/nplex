import { colord } from 'colord';
import { writeFile } from 'fs';
import prettier from 'prettier';
import type { Plugin } from 'vite';
import { themeClass } from '../src/lib/utils/enums';
import { flatten } from '../src/lib/utils/object';
import { PRETTIER_CONFIG } from './common';

/**
 * Dictates the shape of exhaustive color theme definitions.
 */
export type Themes = {
	[name: string]: {
		[neutral in 'bg' | 'fg']: {
			[shade in '000' | '100' | '300' | '500' | '700' | '900']: string;
		};
	} & {
		[color in 'primary' | 'secondary' | 'success' | 'error']: {
			[shade in '100' | '300' | '500' | '700' | '900']: string;
		};
	};
};

const COMMENT = `/*\n* ⚠️ WARNING ⚠️\n*\n* This file was generated by the styles vite-plugin. All changes added manually here will be lost on next iteration run of plugin's generators.\n*\n* Generated at: ${new Date()}\n*\n* ⚠️ WARNING ⚠️\n*/`;

function fade(color: string) {
	const { r, g, b } = colord(color).toRgb();
	return `${r}, ${g}, ${b}`;
}

function toVars(object: object, format: (k: string, v: string | number) => [k: string, v: string | number]) {
	return flatten(object)
		.map(([keys, val]) => {
			const [k, v] = format(keys.join('-'), val);
			return `--${k}: ${v}`;
		})
		.join('; ');
}

export default function plugin(options: { themes: Themes; file: string }): Plugin {
	function writeStyles() {
		try {
			const statements = [
				COMMENT,
				...Object.entries(options.themes).map(([t, c]) => {
					return `.${themeClass(t)} {
						${toVars(c, (k, v) => ['color-' + k, v])};
						${toVars(c, (k, v) => ['rgb-' + k, fade(v + '')])};
					}`;
				}),
			];

			const formatted = prettier.format(statements.join('\n\n'), {
				parser: 'css',
				...PRETTIER_CONFIG,
			});

			writeFile(options.file, formatted, (error) => {
				if (error) throw error;
				else console.info('Style globals generated successfully');
			});
		} catch (error) {
			console.error('Error generating theme', error);
		}
	}

	return {
		name: 'nplex-styles',
		config() {
			writeStyles();
		},
		buildStart() {
			writeStyles();
		},
	};
}
