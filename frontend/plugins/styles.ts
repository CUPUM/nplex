import { colord } from 'colord';
import { writeFile } from 'fs';
import { resolve } from 'path';
import prettier from 'prettier';
import type { Plugin } from 'vite';
import { colors } from '../src/lib/utils/colors';
import { walk } from '../src/lib/utils/object';
import { PRETTIER_CONFIG } from './common';

const OUTPUT_FILE = resolve('src', 'lib', 'styles', 'theme.css.ts');
const COLOR_MODEL = colors.light;
const COMMENT = `/*\n* ⚠️ WARNING ⚠️\n*\n* This file was generated by the styles vite-plugin. All changes added manually here will be lost on next iteration run of plugin's generators.\n*\n* Generated at: ${new Date()}\n*\n* ⚠️ WARNING ⚠️\n*/`;

function fades(colors: typeof COLOR_MODEL): typeof COLOR_MODEL {
	return walk(colors, (k, v) => {
		const rgb = colord(v + '').toRgb();
		return [k, [rgb.r, rgb.g, rgb.b].join(' ')];
	});
}

export default function stylesPlugin(): Plugin {
	function writeStyles() {
		try {
			const statements = [
				`import { createGlobalTheme, createThemeContract, createTheme } from '@vanilla-extract/css';`,
				COMMENT,
				// `const unthemed = createGlobalTheme(':root', ${JSON.stringify({
				// 	sizes,
				// 	ratios,
				// })});`,
				`const themed = createThemeContract(${JSON.stringify({
					colors: COLOR_MODEL,
					fades: fades(COLOR_MODEL),
				})});`,
				`export const vars = {...unthemed, ...themed};`,
				...Object.entries(colors).map(
					([name, t]) =>
						`const ${name} = createTheme(themed, ${JSON.stringify({
							colors: t,
							fades: fades(t),
						})})`
				),
				`export const themes = {${Object.keys(colors).join(', ')}}`,
			];

			const formatted = prettier.format(statements.join('\n\n'), {
				parser: 'typescript',
				...PRETTIER_CONFIG,
			});

			writeFile(OUTPUT_FILE, formatted, (error) => {
				if (error) throw error;
				else console.info('Theme generated successfully');
			});
		} catch (error) {
			console.error('Error generating theme', error);
		}
	}

	return {
		name: 'nplex-styles',
		config() {
			writeStyles();
		},
		buildStart() {
			writeStyles();
		},
	};
}
