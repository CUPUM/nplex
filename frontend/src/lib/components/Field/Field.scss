@use 'utils' as *;

.ui-field {
	--border-thickness: var(--ui-border-thickness);
	--radius: var(--ui-radius-md);
	--height: var(--ui-block-size-lg);
	--inset: var(--ui-inset);
	--notch-padding: 0.25em;
	--gutter: calc(var(--ui-pad-inline) / 3);
	--gutter-out: calc(2 * var(--ui-pad-inline) / 3);
	position: relative;
	display: grid;
	grid-template-columns:
		[full-start leading-start]
		minmax(var(--gutter-out), auto)
		[leading-end leading-gutter-start]
		var(--gutter)
		[leading-gutter-end prefix-start]
		auto
		[prefix-end main-start]
		minmax(0, 1fr)
		[main-end suffix-start]
		auto
		[suffix-end trailing-gutter-start]
		var(--gutter)
		[trailing-gutter-end trailing-start]
		minmax(var(--gutter-out), auto)
		[trailing-end full-end];
	grid-template-rows: minmax(var(--height), auto);
	gap: 0;
	flex-direction: row;
	align-items: stretch;
	font-weight: 400;
	border-radius: var(--radius);
	cursor: text;
	transition: transform 0.15s ease-out;
	&:disabled {
		opacity: 0.5;
		pointer-events: none;
	}
	&.readonly {
		cursor: default;
	}
	&.warning,
	&:has(:out-of-range),
	&:has(:invalid) {
		--ui-outline-color: #{col(error, 500, 0.5)};
		color: col(error, 700) !important;
		background: col(error, 100, 0.1) !important;

		::placeholder,
		label {
			opacity: 0.5;
		}

		.outline {
			border-color: col(error, 500) !important;
		}
	}
	&.success {
		color: col(success, 700) !important;
		background: col(success, 100, 0.1) !important;
	}
}

::placeholder {
	opacity: 0.35;
}

.aside {
	padding: var(--inset) 0;
	margin: 0;
	gap: 0;
	display: flex;
	flex-direction: row;
	align-items: center;
	overflow-x: auto;
	&:not(:empty) {
		gap: 3px;
		padding: var(--inset);
	}
}
.leading {
	grid-column: leading;
}
.trailing {
	grid-column: trailing;
}

.affix {
	align-self: center;
	position: relative;
	display: inline-block;
	padding-bottom: calc(0.5em - 0.5ex);
	top: 0;
	flex: 0;
	white-space: pre;
	opacity: 0.25;
	transition: all 0.2s var(--ui-ease-out);
	:focus-within &,
	:not(:focus-within):not(.haslabel) & {
		transform: translateY(0);
		opacity: 0.5;
	}
}
.prefix {
	grid-column: prefix;
}
.suffix {
	grid-column: suffix;
}

fieldset :global(*[data-field-input]) {
	cursor: inherit;
	font-family: inherit;
	font-weight: inherit;
	font-size: inherit;
	color: inherit;
	position: relative;
	padding-bottom: calc(0.5em - 0.5ex);
	grid-column: main;
	top: 0;
	flex: 1;
	white-space: nowrap;
	border: none;
	outline: none;
	background: transparent;
	text-overflow: ellipsis;
	overflow: hidden;
	transition: all 0.2s cubic-bezier(0.25, 0, 0, 1);
	&:-webkit-autofill,
	&:-webkit-autofill:hover,
	&:-webkit-autofill:focus,
	&:-webkit-autofill:active {
		transition: background-color 0s 50000s;
	}

	&[type='number'] {
		font-variant-numeric: tabular-nums;
	}
}

label {
	opacity: 0.35;
	position: absolute;
	pointer-events: none;
	padding-bottom: calc(0.5em - 0.5ex);
	grid-column: prefix-start / suffix-end;
	max-width: 100%;
	text-overflow: ellipsis;
	white-space: nowrap;
	top: 50%;
	transform: translateY(-50%);
	transition: all 0.15s var(--ui-ease-out);
}

.outline {
	pointer-events: none;
	position: absolute;
	height: 50%;
	transition: all 0.15s ease-out;
	border-width: var(--border-thickness);
	border-style: solid;
}
.left {
	grid-column-end: leading-gutter-end;
	left: 0;
	right: 0;
	top: 0;
	border-top-left-radius: inherit;
	border-right-width: 0;
	border-bottom-width: 0;
}
.right {
	grid-column-start: leading-gutter-end;
	left: 0;
	right: 0;
	top: 0;
	border-left-width: 0;
	border-bottom-width: 0;
	border-top-right-radius: inherit;
}
.bottom {
	left: 0;
	right: 0;
	bottom: 0;
	border-top-width: 0;
	border-bottom-right-radius: inherit;
	border-bottom-left-radius: inherit;
}

.star {
	display: none;
	// color: col(primary, 900);
	padding-left: 0.2em;
	.required & {
		display: inline-block;
	}
}

.haslabel {
	.affix {
		opacity: 0;
	}
}

// Variants

.default,
.opaque {
	color: col(fg, 000);
	background: col(fg, 500, 0.05);
	// background: col(bg, 900);
	transition: color 0.1s ease-out, background 0.1s ease-out;
	.outline {
		display: none;
	}
	&.hasplaceholder,
	&.hasvalue,
	&:focus-within,
	&:has(:-webkit-autofill) {
		label {
			opacity: 0.5;
			top: 1.5em;
			font-size: max(var(--ui-text-xs), 0.65em);
			// font-size: 0.65em;
		}
		.affix {
			opacity: 0.5;
		}
		&.haslabel {
			.affix,
			:global(*[data-field-input]) {
				top: 0.5em;
			}
		}
	}
	:global(.hover-source:hover) &:global(.hover-target),
	&:hover {
		color: col(fg, 700);
		// background: col(fg, 500, 0.1);
	}
	&:focus-within {
		color: col(fg, 900);
		background: col(fg, 500, 0.1);
		// background: col(bg, 300);
		:global(*[data-field-input]) {
			opacity: 1;
		}
	}
}

.opaque {
	--ui-ripple-color: #{col(primary, 500)};
	color: col(fg, 100);
	background: col(bg, 300);
	box-shadow: 0 0.25rem 1rem -0.5rem transparent;
	transition: color 0.1s ease-out, background 0.1s ease-out, box-shadow 0.25s ease-out;
	:global(.hover-source:hover) &:global(.hover-target),
	&:hover {
		color: col(fg, 000);
		background: col(bg, 100);
	}
	&:focus-within {
		color: col(fg, 700);
		background: col(bg, 000);
		// box-shadow: 0 1rem 2rem -1rem rgb(0, 20, 40, 0.5);
		:global(*[data-field-input]) {
			opacity: 1;
		}
	}
}

.outlined,
.dashed {
	color: col(fg, 100);
	background: transparent;
	transition: color 0.1s ease-out, background 0.1s ease-out;
	.outline {
		border-color: col(fg, 000);
		opacity: 0.25;
	}
	&.hasplaceholder,
	&.hasvalue,
	&:focus-within,
	&:has(:-webkit-autofill) {
		label {
			opacity: 0.5;
			top: 0em;
			padding-block: 0;
			font-size: max(var(--ui-text-xs), 0.65em);
			// font-size: clamp(12px, 0.5em, 24px);
		}
		.affix {
			opacity: 0.35;
		}
		&.haslabel {
			.left {
				right: var(--notch-padding);
			}
			.right {
				left: calc(var(--label-width) + var(--notch-padding));
			}
		}
	}
	:global(.hover-source:hover) &:global(.hover-target),
	&:hover:not(.readonly),
	&:focus-within:not(.readonly) {
		color: col(fg, 500);
		background: transparent;
		.outline {
			opacity: 0.75;
		}
		label,
		::placeholder {
			opacity: 0.5;
		}
	}
	&:focus-within {
		outline: none;
		color: col(fg, 700);
		.outline {
			opacity: 1;
			border-color: col(primary, 500);
		}
		label {
			color: col(primary, 500);
		}
	}
}

.dashed {
	.outline {
		border-style: dashed !important;
	}
}

.cta {
	color: col(bg, 300);
	background: col(primary, 500);
	box-shadow: 0 0.2em 1em -0.5em col(primary, 500, 0);
	transition: color 0.1s ease-out, background 0.1s ease-out, box-shadow 0.25s ease-in-out;
	.outline {
		display: none;
	}
	&.hasplaceholder,
	&.hasvalue,
	&:focus-within,
	&:has(:-webkit-autofill) {
		label {
			opacity: 0.5;
			top: 1.5em;
			font-size: clamp(var(--ui-text-xs), 0.5em, 24px);
		}
		.affix {
			opacity: 0.5;
		}
		&.haslabel {
			.affix,
			:global(*[data-field-input]) {
				top: 0.45em;
			}
		}
	}
	:global(.hover-source:hover) &:global(.hover-target),
	&:hover,
	&:focus-within {
		box-shadow: 0 0.8em 1.5em -1em col(primary, 900, 0.5);
		color: col(bg, 100);
		background: col(primary, 700);
		label {
			opacity: 0.5;
		}
	}
	&:focus-within {
		box-shadow: 0 0.5em 1em -0.5em col(primary, 900, 0.5);
		color: col(bg, 100);
	}
}
