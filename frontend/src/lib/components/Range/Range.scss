@use '$styles/utils' as *;

// For use across slottable range components.
@mixin children($variant) {
	:global(.range.#{$variant}) {
		@content;
	}
}

.range {
	--range-thumb-size: 1em;
	--range-padding-inline: 0.5em;
	--range-thumb-radius: 99em;
	--range-track-thickness: max(3px, 0.25em);
	--range-track-color: #{col(fg, 100, 0.2)};
	--range-thumb-color: #{col(fg, 300)};
	--range-domain: calc(var(--range-max) - var(--range-min));
	--range-halo-size: 3px;
	position: relative;
	display: inline-flex;
	flex-direction: column;
	align-items: stretch;
	justify-content: center;
	width: 100%;
}

.column {
	writing-mode: vertical-lr;
	direction: ltr;
}

.row {
	writing-mode: horizontal-tb;
	direction: ltr;
}

.range-track-container {
	position: relative;
	display: flex;
	margin: var(--range-padding-inline);
	align-items: center;
	justify-content: center;
}

.range-track {
	position: relative;
	border-radius: 99px;
	block-size: var(--range-track-thickness);
	inline-size: 100%;
	background-color: var(--range-track-color);
}

.range-ticks-container {
	display: flex;
	flex-direction: row;
	position: relative;
	margin-inline: var(--range-padding-inline);
	height: 1.5em;
}

.range-tick {
	--l: 0.5em;
	position: absolute;
	font-size: var(--ui-text-xs);
	font-variant-numeric: tabular-nums;
	text-align: center;
	color: col(fg, 100, 0.5);
	inset-inline-start: calc(
		(var(--range-tick-value) - var(--range-min)) * 100% / var(--range-domain)
	);
	width: max-content;
	transform: translateX(-50%);
	&::before {
		top: -1em;
		left: calc(50%);
		transform: translateX(-50%);
		content: '';
		position: absolute;
		height: var(--l);
		width: 1.5px;
		background: col(fg, 100, 0.1);
	}
}

// Default variant.
.default {
	// --range-track-color: red;
}

// Outlined variant.
.outlined {
}
