import { colord } from 'colord';
import { writeFile } from 'fs';
import prettier from 'prettier';
import type { Plugin } from 'vite';
import { flatten } from '../lib/utils/object';
import { PRETTIER_CONFIG } from './common';
import { getThemeClass, type ContextTheme } from './helpers';

const COMMENT = `/*\n* ⚠️ WARNING ⚠️\n*\n* This file was generated by the styles vite-plugin. All changes added manually here will be lost on next iteration run of plugin's generators.\n*\n* Generated at: ${new Date()}\n*\n* ⚠️ WARNING ⚠️\n*/`;

function fade(color: string) {
	const { r, g, b } = colord(color).toRgb();
	return `${r}, ${g}, ${b}`;
}

function toVars(
	object: object,
	format: (k: string, v: string | number) => [k: string, v: string | number]
) {
	return flatten(object)
		.map(([keys, val]) => {
			const [k, v] = format(keys.join('-'), val);
			return `--${k}: ${v}`;
		})
		.join('; ');
}

/**
 * Use this plugin to generate css variable themes that can then be used across the app to apply a
 * contextually scoped color theme. By exhaustively defining the themes' css variables as classes,
 * this plugin allows you to assign a theme at various level throughout the ui, beyond simply
 * theming the root element.
 *
 * To retrieve the class name of a theme, use the provided `getThemeClass(name)` helper. It returns
 * a classname composed from the name string it is provided, and formats it in accordance with how
 * this plugin formats the theme classes.
 */
export default function plugin(options: {
	themes: Record<string, ContextTheme>;
	file: string;
}): Plugin {
	function writeStyles() {
		try {
			const statements = [
				COMMENT,
				...Object.entries(options.themes).map(([t, c]) => {
					return `.${getThemeClass(t)} {
						${toVars(c, (k, v) => ['color-' + k, v])};
						${toVars(c, (k, v) => ['rgb-' + k, fade(v + '')])};
					}`;
				}),
			];

			const formatted = prettier.format(statements.join('\n\n'), {
				parser: 'css',
				...PRETTIER_CONFIG,
			});

			writeFile(options.file, formatted, (error) => {
				if (error) throw error;
				else console.info('Style globals generated successfully');
			});
		} catch (error) {
			console.error('Error generating theme', error);
		}
	}

	return {
		name: 'nplex-styles',
		config() {
			writeStyles();
		},
		buildStart() {
			writeStyles();
		},
	};
}
